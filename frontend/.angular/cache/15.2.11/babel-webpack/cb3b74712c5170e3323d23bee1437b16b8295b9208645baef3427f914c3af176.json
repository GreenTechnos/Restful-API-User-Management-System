{"ast":null,"code":"import { of } from 'rxjs';\nimport { delay, mergeMap, materialize, dematerialize } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nimport { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\n// array in local storage for accounts\nconst accountsKey = 'angular-10-registration-login-example-accounts';\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n// in-memory data\nlet employees = [{\n  id: 1,\n  employeeId: 'EMP001',\n  userId: 1,\n  position: 'Developer',\n  departmentId: 1,\n  hireDate: '2025-01-01',\n  status: 'Active'\n}, {\n  id: 2,\n  employeeId: 'EMP002',\n  userId: 2,\n  position: 'Designer',\n  departmentId: 2,\n  hireDate: '2025-02-01',\n  status: 'Active'\n}];\nlet departments = [{\n  id: 1,\n  name: 'Engineering',\n  description: 'Software development team',\n  employeeCount: 1\n}, {\n  id: 2,\n  name: 'Marketing',\n  description: 'Marketing team',\n  employeeCount: 1\n}];\nlet workflows = [{\n  id: 1,\n  employeeId: 1,\n  type: 'Onboarding',\n  details: 'Task: Setup workstation',\n  status: 'Pending'\n}];\nlet requests = [{\n  id: 1,\n  employeeId: 1,\n  type: 'Equipment',\n  requestItems: [{\n    name: 'Laptop',\n    quantity: 1\n  }, {\n    name: 'Monitor',\n    quantity: 2\n  }],\n  status: 'Pending'\n}, {\n  id: 2,\n  employeeId: 1,\n  type: 'Resources',\n  requestItems: [{\n    name: 'Visual Studio',\n    quantity: 1\n  }, {\n    name: 'Office 365',\n    quantity: 1\n  }],\n  status: 'Approved'\n}, {\n  id: 3,\n  employeeId: 2,\n  type: 'Resources',\n  requestItems: [{\n    name: 'Adobe Illustrator Course',\n    quantity: 1\n  }],\n  status: 'Rejected'\n}, {\n  id: 4,\n  employeeId: 2,\n  type: 'Equipment',\n  requestItems: [{\n    name: 'Drawing Tablet',\n    quantity: 1\n  }],\n  status: 'Pending'\n}];\nexport let FakeBackendInterceptor = /*#__PURE__*/(() => {\n  class FakeBackendInterceptor {\n    constructor(alertService) {\n      this.alertService = alertService;\n    }\n    intercept(request, next) {\n      const {\n        url,\n        method,\n        headers,\n        body\n      } = request;\n      const alertService = this.alertService;\n      // Extract the path from the URL (remove the API prefix if present)\n      const apiUrl = environment.apiUrl;\n      const path = url.startsWith(apiUrl) ? url.substring(apiUrl.length) : url;\n      return of(null).pipe(mergeMap(() => handleRoute())).pipe(materialize()).pipe(delay(500)).pipe(dematerialize());\n      function handleRoute() {\n        switch (true) {\n          // Account endpoints\n          case path.endsWith('/accounts/authenticate') && method === 'POST':\n            return authenticate();\n          case path.endsWith('/accounts/refresh-token') && method === 'POST':\n            return refreshToken();\n          case path.endsWith('/accounts/revoke-token') && method === 'POST':\n            return revokeToken();\n          case path.endsWith('/accounts/register') && method === 'POST':\n            return register();\n          case path.endsWith('/accounts/verify-email') && method === 'POST':\n            return verifyEmail();\n          case path.endsWith('/accounts/forgot-password') && method === 'POST':\n            return forgotPassword();\n          case path.endsWith('/accounts/validate-reset-token') && method === 'POST':\n            return validateResetToken();\n          case path.endsWith('/accounts/reset-password') && method === 'POST':\n            return resetPassword();\n          case path.endsWith('/accounts') && method === 'GET':\n            return getAccounts();\n          case path.endsWith('/accounts/active') && method === 'GET':\n            return getActiveAccounts();\n          case path.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n            return getAccountById();\n          case path.endsWith('/accounts') && method === 'POST':\n            return createAccount();\n          case path.match(/\\/accounts\\/\\d+$/) && method === 'PUT':\n            return updateAccount();\n          // Employee endpoints\n          case path.endsWith('/employees') && method === 'GET':\n            return authorize(null, () => getEmployees());\n          case path.endsWith('/employees/nextId') && method === 'GET':\n            return authorize(null, () => getNextEmployeeId());\n          case path.endsWith('/employees') && method === 'POST':\n            return authorize(Role.Admin, () => createEmployee());\n          case path.match(/\\/employees\\/\\d+$/) && method === 'GET':\n            return authorize(null, () => getEmployeeById());\n          case path.match(/\\/employees\\/\\d+\\/with-details$/) && method === 'GET':\n            return authorize(null, () => getEmployeeWithDetails());\n          case path.match(/\\/employees\\/\\d+$/) && method === 'PUT':\n            return authorize(Role.Admin, () => updateEmployee());\n          case path.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'POST':\n            return authorize(Role.Admin, () => transferEmployee());\n          // Department endpoints\n          case path.endsWith('/departments') && method === 'GET':\n            return authorize(null, () => getDepartments());\n          case path.endsWith('/departments') && method === 'POST':\n            return authorize(Role.Admin, () => createDepartment());\n          case path.match(/\\/departments\\/\\d+$/) && method === 'GET':\n            return authorize(null, () => getDepartmentById());\n          case path.match(/\\/departments\\/\\d+$/) && method === 'PUT':\n            return authorize(Role.Admin, () => updateDepartment());\n          // Workflow endpoints\n          case path.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET':\n            return authorize(null, () => getEmployeeWorkflows());\n          case path.endsWith('/workflows') && method === 'GET':\n            return authorize(null, () => getAllWorkflows());\n          case path.endsWith('/workflows') && method === 'POST':\n            return authorize(Role.Admin, () => createWorkflow());\n          case path.match(/\\/workflows\\/\\d+\\/status$/) && method === 'PUT':\n            return authorize(Role.Admin, () => updateWorkflow());\n          case path.match(/\\/workflows\\/\\d+$/) && method === 'PUT':\n            return authorize(Role.Admin, () => updateWorkflow());\n          // Request endpoints\n          case path.endsWith('/requests') && method === 'GET':\n            return authorize(null, () => getRequests());\n          case path.match(/\\/requests\\?employeeId=\\d+$/) && method === 'GET':\n            return authorize(null, () => getRequestsByEmployeeId());\n          case path.match(/\\/requests\\/\\d+$/) && method === 'GET':\n            return authorize(null, () => getRequestById());\n          case path.endsWith('/requests') && method === 'POST':\n            return authorize(null, () => createRequest());\n          case path.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n            return authorize(Role.Admin, () => updateRequest());\n          default:\n            // pass through any requests not handled above\n            return next.handle(request);\n        }\n      }\n      // Account route functions\n      function authenticate() {\n        const {\n          email,\n          password\n        } = body;\n        const account = accounts.find(x => x.email === email);\n        if (!account) {\n          return error('Email does not exist');\n        }\n        if (!account.isVerified) {\n          // Display verification email alert\n          setTimeout(() => {\n            const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n            alertService.info(`\n                        <h4>Verification Email</h4>\n                        <p>Please click the below link to verify your email address:</p>\n                        <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    `, {\n              autoClose: false\n            });\n          }, 1000);\n          return error('Email is not yet verified');\n        }\n        if (account.password !== password) {\n          return error('Incorrect password');\n        }\n        if (account.status !== 'Active') {\n          return error('Account is inactive. Please contact administrator.');\n        }\n        account.refreshTokens.push(generateRefreshToken());\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account)\n        }));\n      }\n      function refreshToken() {\n        const refreshToken = getRefreshToken();\n        if (!refreshToken) return unauthorized();\n        const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n        if (!account) return unauthorized();\n        // replace old refresh token with a new one and save\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        account.refreshTokens.push(generateRefreshToken());\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account)\n        }));\n      }\n      function revokeToken() {\n        if (!isAuthenticated()) return unauthorized();\n        const refreshToken = getRefreshToken();\n        const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n        // revoke token and save\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function register() {\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          // display email already registered message in alert\n          setTimeout(() => {\n            alertService.info(`\n                        <h4>Email Already Registered</h4>\n                        <p>Your email ${account.email} is already registered.</p>\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                        <div>\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\n                        </div>\n                    `, {\n              autoclose: false\n            });\n          }, 1000);\n          // always return ok() response to prevent email enumeration\n          return ok();\n        }\n        // assign account id and a few other properties then save\n        account.id = newAccountId();\n        if (account.id === 1) {\n          // first registered account is an admin\n          account.role = Role.Admin;\n          account.status = 'Active'; // Admin accounts get active status\n        } else {\n          account.role = Role.User;\n          account.status = 'Inactive'; // User accounts get inacitve status upon creation\n        }\n\n        account.dateCreated = new Date().toISOString();\n        account.verificationToken = new Date().getTime().toString();\n        account.isVerified = false;\n        account.refreshTokens = [];\n        delete account.confirmPassword;\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // display verification email in alert\n        setTimeout(() => {\n          const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n          alertService.info(`\n                    <h4>Verification Email</h4>\n                    <p>Thanks for registering!</p>\n                    <p>Please click the below link to verify your email address:</p>\n                    <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, {\n            autoclose: false\n          });\n        }, 1000);\n        return ok();\n      }\n      function verifyEmail() {\n        const {\n          token\n        } = body;\n        const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n        if (!account) return error('Verification failed');\n        // set is verified flag to true if token is valid\n        account.isVerified = true;\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function forgotPassword() {\n        const {\n          email\n        } = body;\n        const account = accounts.find(x => x.email === email);\n        // always return ok() response to prevent email enumeration\n        if (!account) return ok();\n        // create reset token that expires after 24 hours\n        account.resetToken = new Date().getTime().toString();\n        account.resetTokenExpires = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString();\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // display password reset email in alert\n        setTimeout(() => {\n          const resetUrl = `${location.origin}/account/reset-password?token=${account.resetToken}`;\n          alertService.info(`\n                    <h4>Reset Password Email</h4>\n                    <p>Please click the below link to reset your password, the link will be valid for 1 day:</p>\n                    <p><a href=\"${resetUrl}\">${resetUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, {\n            autoClose: false\n          });\n        }, 1000);\n        return ok();\n      }\n      function validateResetToken() {\n        const {\n          token\n        } = body;\n        const account = accounts.find(x => !!x.resetToken && x.resetToken === token && new Date() < new Date(x.resetTokenExpires));\n        if (!account) return error(\"Invalid token\");\n        return ok();\n      }\n      function resetPassword() {\n        const {\n          token,\n          password\n        } = body;\n        const account = accounts.find(x => !!x.resetToken && x.resetToken === token && new Date() < new Date(x.resetTokenExpires));\n        if (!account) return error('Invalid token');\n        // update password and remove reset token\n        account.password = password;\n        account.isVerified = true;\n        delete account.resetToken;\n        delete account.resetTokenExpires;\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function getAccounts() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(accounts.map(x => basicDetails(x)));\n      }\n      // New function to get only active accounts for employee creation\n      function getActiveAccounts() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(accounts.filter(x => x.status === 'Active').map(x => basicDetails(x)));\n      }\n      function getAccountById() {\n        if (!isAuthenticated()) return unauthorized();\n        let account = accounts.find(x => x.id === idFromUrl());\n        // user accounts can get own profile and admin accounts can get all profiles\n        if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {\n          return unauthorized();\n        }\n        return ok(basicDetails(account));\n      }\n      function createAccount() {\n        if (!isAuthorized(Role.Admin)) return unauthorized();\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          return error(`Email ${account.email} is already registered`);\n        }\n        // assign account id and a few other properties then save\n        account.id = newAccountId();\n        account.status = 'Inactive';\n        account.dateCreated = new Date().toISOString();\n        account.isVerified = true;\n        account.refreshTokens = [];\n        delete account.confirmPassword;\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function updateAccount() {\n        if (!isAuthenticated()) return unauthorized();\n        let params = body;\n        let account = accounts.find(x => x.id == idFromUrl());\n        // Check if account exists\n        if (!account) {\n          return error('Account not found');\n        }\n        // user accounts can update own profile and admin accounts can update all profiles\n        if (account.id != currentAccount().id && !isAuthorized(Role.Admin)) {\n          return unauthorized();\n        }\n        // only update password if included\n        if (!params.password) {\n          delete params.password;\n        }\n        // update and save account\n        Object.assign(account, params);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(basicDetails(account));\n      }\n      // Employee route functions\n      function getEmployees() {\n        // Map employees with account and department information\n        const enrichedEmployees = employees.map(employee => {});\n      }\n    }\n  }\n  FakeBackendInterceptor.ɵfac = function FakeBackendInterceptor_Factory(t) {\n    return new (t || FakeBackendInterceptor)(i0.ɵɵinject(i1.AlertService));\n  };\n  FakeBackendInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FakeBackendInterceptor,\n    factory: FakeBackendInterceptor.ɵfac\n  });\n  return FakeBackendInterceptor;\n})();","map":{"version":3,"mappings":"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","names":["of","delay","mergeMap","materialize","dematerialize","Role","environment","accountsKey","accounts","JSON","parse","localStorage","getItem","employees","id","employeeId","userId","position","departmentId","hireDate","status","departments","name","description","employeeCount","workflows","type","details","requests","requestItems","quantity","FakeBackendInterceptor","constructor","alertService","intercept","request","next","url","method","headers","body","apiUrl","path","startsWith","substring","length","pipe","handleRoute","endsWith","authenticate","refreshToken","revokeToken","register","verifyEmail","forgotPassword","validateResetToken","resetPassword","getAccounts","getActiveAccounts","match","getAccountById","createAccount","updateAccount","authorize","getEmployees","getNextEmployeeId","Admin","createEmployee","getEmployeeById","getEmployeeWithDetails","updateEmployee","transferEmployee","getDepartments","createDepartment","getDepartmentById","updateDepartment","getEmployeeWorkflows","getAllWorkflows","createWorkflow","updateWorkflow","getRequests","getRequestsByEmployeeId","getRequestById","createRequest","updateRequest","handle","email","password","account","find","x","error","isVerified","setTimeout","verifyUrl","location","origin","verificationToken","info","autoClose","refreshTokens","push","generateRefreshToken","setItem","stringify","ok","basicDetails","jwtToken","generateJwtToken","getRefreshToken","unauthorized","includes","filter","isAuthenticated","autoclose","newAccountId","role","User","dateCreated","Date","toISOString","getTime","toString","confirmPassword","token","resetToken","resetTokenExpires","now","resetUrl","map","idFromUrl","currentAccount","isAuthorized","params","Object","assign","enrichedEmployees","employee","factory"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\Restful-API-User-Management-System\\frontend\\src\\app\\_helpers\\fake-backend.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS, HttpHeaders } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { delay, mergeMap, materialize, dematerialize } from 'rxjs/operators';\n\nimport { AlertService } from '@app/_services';\nimport { Role } from '@app/_models';\nimport { environment } from '@environments/environment';\n\n// array in local storage for accounts\nconst accountsKey = 'angular-10-registration-login-example-accounts';\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n\n// in-memory data\nlet employees = [\n    { id: 1, employeeId: 'EMP001', userId: 1, position: 'Developer', departmentId: 1, hireDate: '2025-01-01', status: 'Active' },\n    { id: 2, employeeId: 'EMP002', userId: 2, position: 'Designer', departmentId: 2, hireDate: '2025-02-01', status: 'Active' }\n];\n\nlet departments = [\n    { id: 1, name: 'Engineering', description: 'Software development team', employeeCount: 1 },\n    { id: 2, name: 'Marketing', description: 'Marketing team', employeeCount: 1 }\n];\n\nlet workflows = [\n    { id: 1, employeeId: 1, type: 'Onboarding', details: 'Task: Setup workstation', status: 'Pending' }\n];\n\nlet requests = [\n    { id: 1, employeeId: 1, type: 'Equipment', requestItems: [{ name: 'Laptop', quantity: 1 }, { name: 'Monitor', quantity: 2 }], status: 'Pending' },\n    { id: 2, employeeId: 1, type: 'Resources', requestItems: [{ name: 'Visual Studio', quantity: 1 }, { name: 'Office 365', quantity: 1 }], status: 'Approved' },\n    { id: 3, employeeId: 2, type: 'Resources', requestItems: [{ name: 'Adobe Illustrator Course', quantity: 1 }], status: 'Rejected' },\n    { id: 4, employeeId: 2, type: 'Equipment', requestItems: [{ name: 'Drawing Tablet', quantity: 1 }], status: 'Pending' }\n];\n\n@Injectable()\nexport class FakeBackendInterceptor implements HttpInterceptor {\n    constructor(private alertService: AlertService) { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        const { url, method, headers, body } = request;\n        const alertService = this.alertService;\n\n        // Extract the path from the URL (remove the API prefix if present)\n        const apiUrl = environment.apiUrl;\n        const path = url.startsWith(apiUrl) ? url.substring(apiUrl.length) : url;\n\n        return of(null)\n            .pipe(mergeMap(() => handleRoute()))\n            .pipe(materialize())\n            .pipe(delay(500))\n            .pipe(dematerialize());\n\n        function handleRoute() {\n            switch (true) {\n                // Account endpoints\n                case path.endsWith('/accounts/authenticate') && method === 'POST':\n                    return authenticate();\n                case path.endsWith('/accounts/refresh-token') && method === 'POST':\n                    return refreshToken();\n                case path.endsWith('/accounts/revoke-token') && method === 'POST':\n                    return revokeToken();\n                case path.endsWith('/accounts/register') && method === 'POST':\n                    return register();\n                case path.endsWith('/accounts/verify-email') && method === 'POST':\n                    return verifyEmail();\n                case path.endsWith('/accounts/forgot-password') && method === 'POST':\n                    return forgotPassword();\n                case path.endsWith('/accounts/validate-reset-token') && method === 'POST':\n                    return validateResetToken();\n                case path.endsWith('/accounts/reset-password') && method === 'POST':\n                    return resetPassword();\n                case path.endsWith('/accounts') && method === 'GET':\n                    return getAccounts();\n                case path.endsWith('/accounts/active') && method === 'GET':\n                    return getActiveAccounts();\n                case path.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n                    return getAccountById();\n                case path.endsWith('/accounts') && method === 'POST':\n                    return createAccount();\n                case path.match(/\\/accounts\\/\\d+$/) && method === 'PUT':\n                    return updateAccount();\n                \n                // Employee endpoints\n                case path.endsWith('/employees') && method === 'GET':\n                    return authorize(null, () => getEmployees());\n                case path.endsWith('/employees/nextId') && method === 'GET':\n                    return authorize(null, () => getNextEmployeeId());\n                case path.endsWith('/employees') && method === 'POST':\n                    return authorize(Role.Admin, () => createEmployee());\n                case path.match(/\\/employees\\/\\d+$/) && method === 'GET':\n                    return authorize(null, () => getEmployeeById());\n                case path.match(/\\/employees\\/\\d+\\/with-details$/) && method === 'GET':\n                    return authorize(null, () => getEmployeeWithDetails());\n                case path.match(/\\/employees\\/\\d+$/) && method === 'PUT':\n                    return authorize(Role.Admin, () => updateEmployee());\n                case path.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'POST':\n                    return authorize(Role.Admin, () => transferEmployee());\n                \n                // Department endpoints\n                case path.endsWith('/departments') && method === 'GET':\n                    return authorize(null, () => getDepartments());\n                case path.endsWith('/departments') && method === 'POST':\n                    return authorize(Role.Admin, () => createDepartment());\n                case path.match(/\\/departments\\/\\d+$/) && method === 'GET':\n                    return authorize(null, () => getDepartmentById());\n                case path.match(/\\/departments\\/\\d+$/) && method === 'PUT':\n                    return authorize(Role.Admin, () => updateDepartment());\n                \n                // Workflow endpoints\n                case path.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET':\n                    return authorize(null, () => getEmployeeWorkflows());\n                case path.endsWith('/workflows') && method === 'GET':\n                    return authorize(null, () => getAllWorkflows());\n                case path.endsWith('/workflows') && method === 'POST':\n                    return authorize(Role.Admin, () => createWorkflow());\n                case path.match(/\\/workflows\\/\\d+\\/status$/) && method === 'PUT':\n                    return authorize(Role.Admin, () => updateWorkflow());\n                case path.match(/\\/workflows\\/\\d+$/) && method === 'PUT':\n                    return authorize(Role.Admin, () => updateWorkflow());\n                \n                // Request endpoints\n                case path.endsWith('/requests') && method === 'GET':\n                    return authorize(null, () => getRequests());\n                case path.match(/\\/requests\\?employeeId=\\d+$/) && method === 'GET':\n                    return authorize(null, () => getRequestsByEmployeeId());\n                case path.match(/\\/requests\\/\\d+$/) && method === 'GET':\n                    return authorize(null, () => getRequestById());\n                case path.endsWith('/requests') && method === 'POST':\n                    return authorize(null, () => createRequest());\n                case path.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n                    return authorize(Role.Admin, () => updateRequest());\n                \n                default:\n                    // pass through any requests not handled above\n                    return next.handle(request);\n            }\n        }\n\n        // Account route functions\n        function authenticate() {\n            const { email, password } = body;\n            const account = accounts.find(x => x.email === email);\n        \n            if (!account) {\n                return error('Email does not exist');\n            }\n        \n            if (!account.isVerified) {\n                // Display verification email alert\n                setTimeout(() => {\n                    const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n                    alertService.info(`\n                        <h4>Verification Email</h4>\n                        <p>Please click the below link to verify your email address:</p>\n                        <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    `, { autoClose: false });\n                }, 1000);\n        \n                return error('Email is not yet verified');\n            }\n        \n            if (account.password !== password) {\n                return error('Incorrect password');\n            }\n        \n            if (account.status !== 'Active') {\n                return error('Account is inactive. Please contact administrator.');\n            }\n        \n            account.refreshTokens.push(generateRefreshToken());\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        \n            return ok({\n                ...basicDetails(account),\n                jwtToken: generateJwtToken(account)\n            });\n        }\n\n        function refreshToken() {\n            const refreshToken = getRefreshToken();\n\n            if (!refreshToken) return unauthorized();\n\n            const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n\n            if (!account) return unauthorized();\n\n            // replace old refresh token with a new one and save\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n            account.refreshTokens.push(generateRefreshToken());\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok({\n                ...basicDetails(account),\n                jwtToken: generateJwtToken(account)\n            });\n        }\n\n        function revokeToken() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const refreshToken = getRefreshToken();\n            const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n\n            // revoke token and save\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function register() {\n            const account = body;\n\n            if (accounts.find(x => x.email === account.email)) {\n                // display email already registered message in alert\n                setTimeout(() => {\n                    alertService.info(`\n                        <h4>Email Already Registered</h4>\n                        <p>Your email ${account.email} is already registered.</p>\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                        <div>\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\n                        </div>\n                    `, { autoclose: false });\n                }, 1000);\n\n                // always return ok() response to prevent email enumeration\n                return ok();\n            }\n\n            // assign account id and a few other properties then save\n            account.id = newAccountId();\n            if (account.id === 1) {\n                // first registered account is an admin\n                account.role = Role.Admin;\n                account.status = 'Active'; // Admin accounts get active status\n            } else {\n                account.role = Role.User;\n                account.status = 'Inactive'; // User accounts get inacitve status upon creation\n            }\n            account.dateCreated = new Date().toISOString();\n            account.verificationToken = new Date().getTime().toString();\n            account.isVerified = false;\n            account.refreshTokens = [];\n            delete account.confirmPassword;\n            accounts.push(account);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            // display verification email in alert\n            setTimeout(() => {\n                const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n                alertService.info(`\n                    <h4>Verification Email</h4>\n                    <p>Thanks for registering!</p>\n                    <p>Please click the below link to verify your email address:</p>\n                    <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, { autoclose: false });\n            }, 1000);\n\n            return ok();\n        }\n\n        function verifyEmail() {\n            const { token } = body;\n            const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n\n            if (!account) return error('Verification failed');\n\n            // set is verified flag to true if token is valid\n            account.isVerified = true;\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function forgotPassword() {\n            const { email } = body;\n            const account = accounts.find(x => x.email === email);\n\n            // always return ok() response to prevent email enumeration\n            if (!account) return ok();\n\n            // create reset token that expires after 24 hours\n            account.resetToken = new Date().getTime().toString();\n            account.resetTokenExpires = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString();\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            // display password reset email in alert\n            setTimeout(() => {\n                const resetUrl = `${location.origin}/account/reset-password?token=${account.resetToken}`;\n                alertService.info(`\n                    <h4>Reset Password Email</h4>\n                    <p>Please click the below link to reset your password, the link will be valid for 1 day:</p>\n                    <p><a href=\"${resetUrl}\">${resetUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, { autoClose: false });\n            }, 1000);\n\n            return ok();\n        }\n\n        function validateResetToken() {\n            const { token } = body;\n            const account = accounts.find(x =>\n                !!x.resetToken &&\n                x.resetToken === token &&\n                new Date() < new Date(x.resetTokenExpires)\n            );\n\n            if (!account) return error(\"Invalid token\");\n\n            return ok();\n        }\n\n        function resetPassword() {\n            const { token, password } = body;\n            const account = accounts.find(x =>\n                !!x.resetToken && x.resetToken === token &&\n                new Date() < new Date(x.resetTokenExpires)\n            );\n\n            if (!account) return error('Invalid token');\n\n            // update password and remove reset token\n            account.password = password;\n            account.isVerified = true;\n            delete account.resetToken;\n            delete account.resetTokenExpires;\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function getAccounts() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(accounts.map(x => basicDetails(x)));\n        }\n\n        // New function to get only active accounts for employee creation\n        function getActiveAccounts() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(accounts\n                .filter(x => x.status === 'Active')\n                .map(x => basicDetails(x)));\n        }\n\n        function getAccountById() {\n            if (!isAuthenticated()) return unauthorized();\n\n            let account = accounts.find(x => x.id === idFromUrl());\n\n            // user accounts can get own profile and admin accounts can get all profiles\n            if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {\n                return unauthorized();\n            }\n\n            return ok(basicDetails(account));\n        }\n\n        function createAccount() {\n            if (!isAuthorized(Role.Admin)) return unauthorized();\n\n            const account = body;\n            if (accounts.find(x => x.email === account.email)) {\n                return error(`Email ${account.email} is already registered`);\n            }\n\n            // assign account id and a few other properties then save\n            account.id = newAccountId();\n            account.status = 'Inactive';\n            account.dateCreated = new Date().toISOString();\n            account.isVerified = true;\n            account.refreshTokens = [];\n            delete account.confirmPassword;\n            accounts.push(account);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function updateAccount() {\n            if (!isAuthenticated()) return unauthorized();\n\n            let params = body;\n            let account = accounts.find(x => x.id == idFromUrl());\n\n            // Check if account exists\n            if (!account) {\n                return error('Account not found');\n            }\n\n            // user accounts can update own profile and admin accounts can update all profiles\n            if (account.id != currentAccount().id && !isAuthorized(Role.Admin)) {\n                return unauthorized();\n            }\n\n            // only update password if included\n            if (!params.password) {\n                delete params.password;\n            }\n\n            // update and save account\n            Object.assign(account, params);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok(basicDetails(account));\n        }\n\n        // Employee route functions\n        function getEmployees() {\n            // Map employees with account and department information\n            const enrichedEmployees = employees.map(employee => {"]},"metadata":{},"sourceType":"module","externalDependencies":[]}