{"ast":null,"code":"import { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let WorkflowService = /*#__PURE__*/(() => {\n  class WorkflowService {\n    constructor(http) {\n      this.http = http;\n    }\n    getAll() {\n      return this.http.get(`${environment.apiUrl}/workflows`);\n    }\n    getById(id) {\n      return this.http.get(`${environment.apiUrl}/workflows/${id}`);\n    }\n    getByEmployeeId(employeeId) {\n      return this.http.get(`${environment.apiUrl}/workflows/employee/${employeeId}`);\n    }\n    getByRequestId(requestId) {\n      return this.http.get(`${environment.apiUrl}/workflows/request/${requestId}`);\n    }\n    create(workflow) {\n      // Check if details is an object and stringify it before sending to the backend\n      if (workflow && workflow.details && typeof workflow.details === 'object') {\n        const workflowCopy = Object.assign({}, workflow);\n        workflowCopy.details = JSON.stringify(workflow.details);\n        return this.http.post(`${environment.apiUrl}/workflows`, workflowCopy);\n      }\n      return this.http.post(`${environment.apiUrl}/workflows`, workflow);\n    }\n    update(id, params) {\n      return this.http.put(`${environment.apiUrl}/workflows/${id}`, params);\n    }\n    changeStatus(id, status, comments = '') {\n      return this.http.put(`${environment.apiUrl}/workflows/${id}/status`, {\n        status,\n        comments\n      });\n    }\n    // New method to update both workflow and request status\n    updateWorkflowAndRequestStatus(workflowId, status, requestId, comments = '') {\n      // Convert requestId to a number if it's a string\n      let numericRequestId = null;\n      if (requestId) {\n        numericRequestId = typeof requestId === 'string' ? parseInt(requestId) : requestId;\n      }\n      // First determine if we're using the real backend or fake backend\n      // Check if useFakeBackend property exists, default to false if not\n      const useFakeBackend = environment.useFakeBackend;\n      const isRealBackend = useFakeBackend === undefined ? true : !useFakeBackend;\n      if (isRealBackend) {\n        // Real backend implementation - use the status endpoint which now handles the request update\n        return this.http.put(`${environment.apiUrl}/workflows/${workflowId}/status`, {\n          status,\n          comments,\n          requestId: numericRequestId // Send requestId to help the backend find the related request\n        });\n      } else {\n        // Fake backend implementation - use the special fields it understands\n        return this.http.put(`${environment.apiUrl}/workflows/${workflowId}`, {\n          status,\n          updateRequest: true,\n          requestId: numericRequestId // Include requestId if provided\n        });\n      }\n    }\n\n    delete(id) {\n      return this.http.delete(`${environment.apiUrl}/workflows/${id}`);\n    }\n    deleteItem(itemId) {\n      return this.http.delete(`${environment.apiUrl}/workflows/items/${itemId}`);\n    }\n  }\n  WorkflowService.ɵfac = function WorkflowService_Factory(t) {\n    return new (t || WorkflowService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  WorkflowService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WorkflowService,\n    factory: WorkflowService.ɵfac,\n    providedIn: 'root'\n  });\n  return WorkflowService;\n})();","map":{"version":3,"mappings":"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","names":["environment","WorkflowService","constructor","http","getAll","get","apiUrl","getById","id","getByEmployeeId","employeeId","getByRequestId","requestId","create","workflow","details","workflowCopy","JSON","stringify","post","update","params","put","changeStatus","status","comments","updateWorkflowAndRequestStatus","workflowId","numericRequestId","parseInt","useFakeBackend","isRealBackend","undefined","updateRequest","delete","deleteItem","itemId","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\Restful-API-User-Management-System-backend-postrero\\frontend\\src\\app\\_services\\workflow.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of, switchMap, tap } from 'rxjs';\n\nimport { environment } from '@environments/environment';\nimport { Workflow } from '@app/_models/workflow';\n\n@Injectable({ providedIn: 'root' })\nexport class WorkflowService {\n    constructor(private http: HttpClient) { }\n\n    getAll() {\n        return this.http.get<Workflow[]>(`${environment.apiUrl}/workflows`);\n    }\n\n    getById(id: string) {\n        return this.http.get<Workflow>(`${environment.apiUrl}/workflows/${id}`);\n    }\n\n    getByEmployeeId(employeeId: string) {\n        return this.http.get<Workflow[]>(`${environment.apiUrl}/workflows/employee/${employeeId}`);\n    }\n\n    getByRequestId(requestId: string) {\n        return this.http.get<Workflow[]>(`${environment.apiUrl}/workflows/request/${requestId}`);\n    }\n\n    create(workflow: any) {\n        // Check if details is an object and stringify it before sending to the backend\n        if (workflow && workflow.details && typeof workflow.details === 'object') {\n            const workflowCopy = { ...workflow };\n            workflowCopy.details = JSON.stringify(workflow.details);\n            return this.http.post<Workflow>(`${environment.apiUrl}/workflows`, workflowCopy);\n        }\n        return this.http.post<Workflow>(`${environment.apiUrl}/workflows`, workflow);\n    }\n\n    update(id: string, params: any) {\n        return this.http.put<Workflow>(`${environment.apiUrl}/workflows/${id}`, params);\n    }\n\n    changeStatus(id: string, status: string, comments: string = '') {\n        return this.http.put<Workflow>(`${environment.apiUrl}/workflows/${id}/status`, { status, comments });\n    }\n\n    // New method to update both workflow and request status\n    updateWorkflowAndRequestStatus(workflowId: string, status: string, requestId?: any, comments: string = '') {\n        // Convert requestId to a number if it's a string\n        let numericRequestId = null;\n        if (requestId) {\n            numericRequestId = typeof requestId === 'string' ? parseInt(requestId) : requestId;\n        }\n        \n        // First determine if we're using the real backend or fake backend\n        // Check if useFakeBackend property exists, default to false if not\n        const useFakeBackend = (environment as any).useFakeBackend;\n        const isRealBackend = useFakeBackend === undefined ? true : !useFakeBackend;\n        \n        if (isRealBackend) {\n            // Real backend implementation - use the status endpoint which now handles the request update\n            return this.http.put<Workflow>(`${environment.apiUrl}/workflows/${workflowId}/status`, { \n                status,\n                comments,\n                requestId: numericRequestId // Send requestId to help the backend find the related request\n            });\n        } else {\n            // Fake backend implementation - use the special fields it understands\n            return this.http.put<Workflow>(`${environment.apiUrl}/workflows/${workflowId}`, { \n                status,\n                updateRequest: true, // Signal to fake backend to update request too\n                requestId: numericRequestId // Include requestId if provided\n            });\n        }\n    }\n\n    delete(id: string) {\n        return this.http.delete(`${environment.apiUrl}/workflows/${id}`);\n    }\n\n    deleteItem(itemId: string) {\n        return this.http.delete(`${environment.apiUrl}/workflows/items/${itemId}`);\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}