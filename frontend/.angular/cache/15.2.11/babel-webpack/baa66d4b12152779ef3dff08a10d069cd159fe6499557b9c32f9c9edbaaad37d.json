{"ast":null,"code":"import { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\nexport let JwtInterceptor = /*#__PURE__*/(() => {\n  class JwtInterceptor {\n    constructor(accountService) {\n      this.accountService = accountService;\n    }\n    intercept(request, next) {\n      // add auth header with jwt if account is logged in and request is to the api url\n      const account = this.accountService.accountValue;\n      const isLoggedIn = account && account.jwtToken;\n      const isApiUrl = request.url.startsWith(environment.apiUrl);\n      if (isLoggedIn && isApiUrl) {\n        request = request.clone({\n          setHeaders: {\n            Authorization: `Bearer ${account.jwtToken}`\n          }\n        });\n      }\n      return next.handle(request);\n    }\n  }\n  JwtInterceptor.ɵfac = function JwtInterceptor_Factory(t) {\n    return new (t || JwtInterceptor)(i0.ɵɵinject(i1.AccountService));\n  };\n  JwtInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JwtInterceptor,\n    factory: JwtInterceptor.ɵfac\n  });\n  return JwtInterceptor;\n})();","map":{"version":3,"mappings":"AAIA,SAASA,WAAW,QAAQ,2BAA2B;;;AAIvD,WAAaC,cAAc;EAArB,MAAOA,cAAc;IACvBC,YAAoBC,cAA8B;MAA9B,mBAAc,GAAdA,cAAc;IAAoB;IAEtDC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;MAClD;MACA,MAAMC,OAAO,GAAG,IAAI,CAACJ,cAAc,CAACK,YAAY;MAChD,MAAMC,UAAU,GAAGF,OAAO,IAAIA,OAAO,CAACG,QAAQ;MAC9C,MAAMC,QAAQ,GAAGN,OAAO,CAACO,GAAG,CAACC,UAAU,CAACb,WAAW,CAACc,MAAM,CAAC;MAE3D,IAAIL,UAAU,IAAIE,QAAQ,EAAE;QACxBN,OAAO,GAAGA,OAAO,CAACU,KAAK,CAAC;UACpBC,UAAU,EAAE;YAAEC,aAAa,EAAE,UAAUV,OAAO,CAACG,QAAQ;UAAE;SAC5D,CAAC;;MAGN,OAAOJ,IAAI,CAACY,MAAM,CAACb,OAAO,CAAC;IAC/B;;;qBAhBSJ,cAAc;EAAA;;WAAdA,cAAc;IAAAkB,SAAdlB,cAAc;EAAA;EAAA,OAAdA,cAAc;AAAA","names":["environment","JwtInterceptor","constructor","accountService","intercept","request","next","account","accountValue","isLoggedIn","jwtToken","isApiUrl","url","startsWith","apiUrl","clone","setHeaders","Authorization","handle","factory"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\Restful-API-User-Management-System-backend-postrero\\frontend\\src\\app\\_helpers\\jwt.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { environment } from '@environments/environment';\nimport { AccountService } from '@app/_services';\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n    constructor(private accountService: AccountService) { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        // add auth header with jwt if account is logged in and request is to the api url\n        const account = this.accountService.accountValue;\n        const isLoggedIn = account && account.jwtToken;\n        const isApiUrl = request.url.startsWith(environment.apiUrl);\n\n        if (isLoggedIn && isApiUrl) {\n            request = request.clone({\n                setHeaders: { Authorization: `Bearer ${account.jwtToken}` }\n            });\n        }\n\n        return next.handle(request);\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}