{"ast":null,"code":"import { first } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nimport { WorkflowStatus, WorkflowType } from '@app/_models/workflow';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nconst _c0 = [\"confirmModal\"];\nfunction ListWorkflowComponent_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"for Employee \", ctx_r0.employeeDetails.employeeId, \"\");\n  }\n}\nfunction ListWorkflowComponent_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \" - All Workflows\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ListWorkflowComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵelement(1, \"span\", 10);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ListWorkflowComponent_div_7_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"No workflows found for this employee.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ListWorkflowComponent_div_7_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"No workflows found.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ListWorkflowComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtemplate(1, ListWorkflowComponent_div_7_p_1_Template, 2, 0, \"p\", 2);\n    i0.ɵɵtemplate(2, ListWorkflowComponent_div_7_p_2_Template, 2, 0, \"p\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.employeeIdFromQuery);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r3.employeeIdFromQuery);\n  }\n}\nfunction ListWorkflowComponent_div_8_th_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\");\n    i0.ɵɵtext(1, \"Actions\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ListWorkflowComponent_div_8_tr_12_ng_container_4_ng_container_1_ng_container_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"b\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"titlecase\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const entry_r16 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(3, 2, entry_r16.key), \":\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", entry_r16.value, \"\");\n  }\n}\nfunction ListWorkflowComponent_div_8_tr_12_ng_container_4_ng_container_1_ng_container_1_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const entry_r16 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(entry_r16.value);\n  }\n}\nfunction ListWorkflowComponent_div_8_tr_12_ng_container_4_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, ListWorkflowComponent_div_8_tr_12_ng_container_4_ng_container_1_ng_container_1_div_1_Template, 5, 4, \"div\", 2);\n    i0.ɵɵtemplate(2, ListWorkflowComponent_div_8_tr_12_ng_container_4_ng_container_1_ng_container_1_div_2_Template, 2, 1, \"div\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const entry_r16 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", entry_r16.key);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !entry_r16.key);\n  }\n}\nfunction ListWorkflowComponent_div_8_tr_12_ng_container_4_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, ListWorkflowComponent_div_8_tr_12_ng_container_4_ng_container_1_ng_container_1_Template, 3, 2, \"ng-container\", 14);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const workflow_r11 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r14.getDetailsAsObject(workflow_r11.details));\n  }\n}\nfunction ListWorkflowComponent_div_8_tr_12_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, ListWorkflowComponent_div_8_tr_12_ng_container_4_ng_container_1_Template, 2, 1, \"ng-container\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const workflow_r11 = i0.ɵɵnextContext().$implicit;\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !(ctx_r12.isRequestApprovalType(workflow_r11.type) && ctx_r12.isTaskOnlyWorkflow(workflow_r11.details)));\n  }\n}\nfunction ListWorkflowComponent_div_8_tr_12_td_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r25 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\")(1, \"select\", 16);\n    i0.ɵɵlistener(\"ngModelChange\", function ListWorkflowComponent_div_8_tr_12_td_8_Template_select_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r25);\n      const workflow_r11 = i0.ɵɵnextContext().$implicit;\n      return i0.ɵɵresetView(workflow_r11.status = $event);\n    })(\"ngModelChange\", function ListWorkflowComponent_div_8_tr_12_td_8_Template_select_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r25);\n      const workflow_r11 = i0.ɵɵnextContext().$implicit;\n      const ctx_r26 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r26.onStatusSelected(workflow_r11, $event));\n    });\n    i0.ɵɵelementStart(2, \"option\", 17);\n    i0.ɵɵtext(3, \"Pending\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"option\", 17);\n    i0.ɵɵtext(5, \"Approved \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"option\", 17);\n    i0.ɵɵtext(7, \"Rejected \");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const workflow_r11 = i0.ɵɵnextContext().$implicit;\n    const ctx_r13 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", workflow_r11.status)(\"disabled\", workflow_r11.status === ctx_r13.WorkflowStatus.Completed || workflow_r11.status === ctx_r13.WorkflowStatus.Rejected);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngValue\", ctx_r13.WorkflowStatus.Pending);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngValue\", ctx_r13.WorkflowStatus.Approved);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngValue\", ctx_r13.WorkflowStatus.Rejected);\n  }\n}\nconst _c1 = function (a0, a1, a2) {\n  return {\n    \"bg-warning text-dark\": a0,\n    \"bg-success\": a1,\n    \"bg-danger\": a2\n  };\n};\nfunction ListWorkflowComponent_div_8_tr_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtemplate(4, ListWorkflowComponent_div_8_tr_12_ng_container_4_Template, 2, 1, \"ng-container\", 2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\")(6, \"span\", 15);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(8, ListWorkflowComponent_div_8_tr_12_td_8_Template, 8, 5, \"td\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const workflow_r11 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(workflow_r11.type);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", workflow_r11.details);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(5, _c1, workflow_r11.status === ctx_r10.WorkflowStatus.Pending || workflow_r11.status === ctx_r10.WorkflowStatus.ForReviewing, workflow_r11.status === ctx_r10.WorkflowStatus.Completed || workflow_r11.status === ctx_r10.WorkflowStatus.Approved, workflow_r11.status === ctx_r10.WorkflowStatus.Rejected));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", workflow_r11.status, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r10.isAdmin);\n  }\n}\nfunction ListWorkflowComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"table\", 13)(2, \"thead\")(3, \"tr\")(4, \"th\");\n    i0.ɵɵtext(5, \"Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"th\");\n    i0.ɵɵtext(7, \"Details\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"th\");\n    i0.ɵɵtext(9, \"Status\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(10, ListWorkflowComponent_div_8_th_10_Template, 2, 0, \"th\", 2);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(11, \"tbody\");\n    i0.ɵɵtemplate(12, ListWorkflowComponent_div_8_tr_12_Template, 9, 9, \"tr\", 14);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(10);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.isAdmin);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.workflows);\n  }\n}\nfunction ListWorkflowComponent_button_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r30 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function ListWorkflowComponent_button_10_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r30);\n      const ctx_r29 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r29.goBackToEmployees());\n    });\n    i0.ɵɵtext(1, \"Back to Employees \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ListWorkflowComponent_button_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r32 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function ListWorkflowComponent_button_11_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r32);\n      const ctx_r31 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r31.goBackToAdminDashboard());\n    });\n    i0.ɵɵtext(1, \"Back to Admin Dashboard\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let ListWorkflowComponent = /*#__PURE__*/(() => {\n  class ListWorkflowComponent {\n    constructor(workflowService, alertService, accountService, employeeService, route, router) {\n      var _a;\n      this.workflowService = workflowService;\n      this.alertService = alertService;\n      this.accountService = accountService;\n      this.employeeService = employeeService;\n      this.route = route;\n      this.router = router;\n      this.workflows = [];\n      this.loading = false;\n      this.currentAccount = null;\n      this.isAdmin = false;\n      this.employeeId = null;\n      this.displayEmployeeId = null;\n      this.confirmMessage = '';\n      this.notFound = false;\n      this.pendingStatusChange = null;\n      this.employeeIdFromQuery = null;\n      this.employeeDetails = null;\n      this.statusUpdateWorkflow = null;\n      // Make enum available in template\n      this.WorkflowStatus = WorkflowStatus;\n      this.Role = Role;\n      this.subscriptions = [];\n      this.currentAccount = this.accountService.accountValue;\n      this.isAdmin = ((_a = this.currentAccount) === null || _a === void 0 ? void 0 : _a.role) === Role.Admin;\n    }\n    ngOnDestroy() {\n      // Unsubscribe from all subscriptions to prevent memory leaks\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n    ngOnInit() {\n      this.queryParamsSubscription = this.route.queryParams.subscribe(params => {\n        this.employeeIdFromQuery = params['employeeId'];\n        this.workflows = [];\n        this.employeeDetails = null;\n        if (this.employeeIdFromQuery) {\n          this.loadEmployeeDetails(this.employeeIdFromQuery);\n          this.loadWorkflowsForEmployee(this.employeeIdFromQuery);\n        } else if (this.isAdmin) {\n          this.loadAllWorkflows();\n        } else {\n          const currentEmployeeId = this.employeeId;\n          if (currentEmployeeId) {\n            this.employeeIdFromQuery = String(currentEmployeeId);\n            this.loadEmployeeDetails(String(currentEmployeeId));\n            this.loadWorkflowsForEmployee(String(currentEmployeeId));\n          } else {\n            this.alertService.info(\"No employee specified, and your account is not linked to an employee record.\");\n            this.loading = false;\n          }\n        }\n      });\n    }\n    loadEmployeeDetails(employeeId) {\n      this.employeeService.getById(employeeId).pipe(first()).subscribe({\n        next: employee => this.employeeDetails = employee,\n        error: err => this.alertService.error(this.formatError(err, 'Failed to load employee details'))\n      });\n    }\n    loadWorkflowsForEmployee(employeeId) {\n      this.loading = true;\n      this.workflowService.getByEmployeeId(employeeId).pipe(first()).subscribe({\n        next: workflows => {\n          // Filter out task-only RequestApproval workflows\n          const filteredWorkflows = workflows.filter(workflow => !(this.isRequestApprovalType(workflow.type) && this.isTaskOnlyWorkflow(workflow.details)));\n          this.workflows = this.sortWorkflows(filteredWorkflows);\n          this.loading = false;\n        },\n        error: err => {\n          this.alertService.error(this.formatError(err, `Failed to load workflows for employee ${employeeId}`));\n          this.workflows = [];\n          this.loading = false;\n        }\n      });\n    }\n    loadAllWorkflows() {\n      this.loading = true;\n      this.workflowService.getAll().pipe(first()).subscribe({\n        next: workflows => {\n          // Filter out task-only RequestApproval workflows\n          const filteredWorkflows = workflows.filter(workflow => !(this.isRequestApprovalType(workflow.type) && this.isTaskOnlyWorkflow(workflow.details)));\n          this.workflows = this.sortWorkflows(filteredWorkflows);\n          this.loading = false;\n        },\n        error: err => {\n          this.alertService.error(this.formatError(err, 'Failed to load all workflows'));\n          this.workflows = [];\n          this.loading = false;\n        }\n      });\n    }\n    sortWorkflows(workflows) {\n      return workflows.sort((a, b) => {\n        const dateA = new Date(a.datetimecreated || 0).getTime();\n        const dateB = new Date(b.datetimecreated || 0).getTime();\n        return dateB - dateA;\n      });\n    }\n    onStatusSelected(workflow, newStatus) {\n      console.log(`Status change selected for workflow ${workflow.id} to ${newStatus}`);\n      this.updateWorkflowStatus(workflow, newStatus);\n    }\n    updateWorkflowStatus(workflow, newStatus) {\n      if (!workflow || !workflow.id) return;\n      // Extract requestId from workflow details if this is a request approval workflow\n      let requestId = null;\n      if (this.isRequestApprovalType(workflow.type) && workflow.details) {\n        // Extract requestId from workflow details\n        let details = workflow.details;\n        if (typeof details === 'string') {\n          try {\n            // Try to parse JSON first\n            details = JSON.parse(details);\n          } catch (e) {\n            // If parsing fails, try regex extraction methods\n            const detailsText = details;\n            const boldMatch = detailsText.match(/<b>requestId:<\\/b>\\s*(\\d+)/i);\n            if (boldMatch && boldMatch[1]) {\n              requestId = boldMatch[1];\n            } else {\n              const plainMatch = detailsText.match(/requestId:\\s*(\\d+)/i);\n              if (plainMatch && plainMatch[1]) {\n                requestId = plainMatch[1];\n              } else {\n                const hashMatch = detailsText.match(/request\\s+#(\\d+)/i);\n                if (hashMatch && hashMatch[1]) {\n                  requestId = hashMatch[1];\n                }\n              }\n            }\n          }\n        }\n        // If we have parsed JSON details, extract requestId\n        if (details && details.requestId) {\n          requestId = details.requestId;\n        }\n      }\n      // Use the updateWorkflowAndRequestStatus method to update both entities\n      this.workflowService.updateWorkflowAndRequestStatus(workflow.id, newStatus, requestId).pipe(first()).subscribe({\n        next: updatedWorkflow => {\n          const index = this.workflows.findIndex(w => w.id === updatedWorkflow.id);\n          if (index !== -1) {\n            this.workflows[index] = Object.assign(Object.assign({}, this.workflows[index]), updatedWorkflow);\n          }\n          this.alertService.success('Workflow status updated successfully!');\n        },\n        error: err => {\n          this.alertService.error(this.formatError(err, 'Failed to update workflow status'));\n        }\n      });\n    }\n    openStatusChangeModal(id, status) {\n      const workflow = this.workflows.find(x => x.id === id);\n      if (!workflow) return;\n      this.pendingStatusChange = {\n        id,\n        status\n      };\n      this.confirmMessage = `Are you sure you want to mark this workflow ${status === WorkflowStatus.ForReviewing ? 'for review' : 'as completed'}?`;\n      this.confirmModal.show();\n    }\n    onStatusChangeConfirmed() {\n      if (!this.pendingStatusChange) return;\n      const {\n        id,\n        status\n      } = this.pendingStatusChange;\n      const workflow = this.workflows.find(x => x.id === id);\n      if (!workflow) return;\n      workflow.isUpdating = true;\n      this.workflowService.changeStatus(id, status).pipe(first()).subscribe({\n        next: () => {\n          workflow.status = status;\n          workflow.isUpdating = false;\n          this.alertService.success('Workflow status updated successfully');\n        },\n        error: error => {\n          this.alertService.error(error);\n          workflow.isUpdating = false;\n        }\n      });\n      this.pendingStatusChange = null;\n    }\n    deleteWorkflow(id) {\n      const workflow = this.workflows.find(x => x.id === id);\n      if (!workflow) return;\n      if (confirm('Are you sure you want to delete this workflow?')) {\n        workflow.isDeleting = true;\n        this.workflowService.delete(id).pipe(first()).subscribe({\n          next: () => {\n            this.workflows = this.workflows.filter(x => x.id !== id);\n            this.alertService.success('Workflow deleted successfully');\n          },\n          error: error => {\n            this.alertService.error(error);\n            workflow.isDeleting = false;\n          }\n        });\n      }\n    }\n    getDetailsAsObject(details) {\n      // If workflow is an onboarding with a simple task description\n      if (typeof details === 'string') {\n        // Handle department transfer text directly\n        if (details.includes('Employee transferred from')) {\n          return [{\n            key: '',\n            value: details\n          }];\n        }\n        // Handle task description\n        if (details.startsWith('Task:')) {\n          return [{\n            key: 'Task',\n            value: details\n          }];\n        }\n        try {\n          details = JSON.parse(details);\n        } catch (e) {\n          // If parsing fails, just return the string as is\n          return [{\n            key: '',\n            value: details\n          }];\n        }\n      }\n      // For Request Approval workflows, format in the standard way\n      if (details && details.requestId && details.requestType && details.requesterId && details.message) {\n        return [{\n          key: 'requestId',\n          value: details.requestId\n        }, {\n          key: 'requestType',\n          value: details.requestType\n        }, {\n          key: 'requesterId',\n          value: details.requesterId\n        }, {\n          key: 'message',\n          value: details.message\n        }];\n      }\n      // For task-based workflows, show only the task if not a Request Approval workflow\n      if (details && details.task) {\n        return [{\n          key: 'Task',\n          value: details.task\n        }];\n      }\n      // Return the details as key-value pairs for other cases\n      return Object.entries(details || {}).map(([key, value]) => ({\n        key,\n        value: typeof value === 'object' ? JSON.stringify(value) : value\n      }));\n    }\n    isPendingOrReviewing(status) {\n      return status === WorkflowStatus.Pending || status === WorkflowStatus.ForReviewing;\n    }\n    // Check if workflow details only contain a task field\n    isTaskOnlyWorkflow(details) {\n      if (typeof details === 'string') {\n        try {\n          details = JSON.parse(details);\n        } catch (e) {\n          // If can't parse as JSON, it's likely just a string task\n          return true;\n        }\n      }\n      // If it has only a task property and no others, it's a task-only workflow\n      return details && details.task && Object.keys(details).length === 1 && !details.requestId && !details.requestType && !details.requesterId && !details.message;\n    }\n    isCompletedOrApproved(status) {\n      return status === WorkflowStatus.Completed || status === WorkflowStatus.Approved;\n    }\n    isRejected(status) {\n      return status === WorkflowStatus.Rejected;\n    }\n    canChangeStatus(status) {\n      return !(status === WorkflowStatus.Completed || status === WorkflowStatus.Rejected);\n    }\n    goBackToEmployees() {\n      this.router.navigate(['/admin/employees']);\n    }\n    goBackToAdminDashboard() {\n      this.router.navigate(['/admin']); // Or your main admin overview page\n    }\n\n    formatError(error, defaultMessage) {\n      var _a;\n      if (error instanceof HttpErrorResponse) {\n        return ((_a = error.error) === null || _a === void 0 ? void 0 : _a.message) || error.message || defaultMessage;\n      }\n      return error.message || defaultMessage;\n    }\n    // Helper method to check if workflow is a request approval type\n    isRequestApprovalType(type) {\n      return type === WorkflowType.RequestApproval || type === 'Request Approval';\n    }\n  }\n  ListWorkflowComponent.ɵfac = function ListWorkflowComponent_Factory(t) {\n    return new (t || ListWorkflowComponent)(i0.ɵɵdirectiveInject(i1.WorkflowService), i0.ɵɵdirectiveInject(i1.AlertService), i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i1.EmployeeService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router));\n  };\n  ListWorkflowComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ListWorkflowComponent,\n    selectors: [[\"ng-component\"]],\n    viewQuery: function ListWorkflowComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.confirmModal = _t.first);\n      }\n    },\n    decls: 12,\n    vars: 7,\n    consts: [[1, \"card\"], [1, \"card-header\"], [4, \"ngIf\"], [1, \"card-body\"], [\"class\", \"text-center\", 4, \"ngIf\"], [\"class\", \"text-center text-muted\", 4, \"ngIf\"], [\"class\", \"table-responsive\", 4, \"ngIf\"], [1, \"mt-3\", \"text-end\"], [\"class\", \"btn btn-secondary\", 3, \"click\", 4, \"ngIf\"], [1, \"text-center\"], [1, \"spinner-border\", \"spinner-border-lg\", \"align-center\"], [1, \"text-center\", \"text-muted\"], [1, \"table-responsive\"], [1, \"table\", \"table-striped\", \"align-middle\"], [4, \"ngFor\", \"ngForOf\"], [1, \"badge\", 3, \"ngClass\"], [1, \"form-select\", \"form-select-sm\", \"d-inline-block\", \"w-auto\", 3, \"ngModel\", \"disabled\", \"ngModelChange\"], [3, \"ngValue\"], [1, \"btn\", \"btn-secondary\", 3, \"click\"]],\n    template: function ListWorkflowComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵtext(2, \" Workflows \");\n        i0.ɵɵtemplate(3, ListWorkflowComponent_span_3_Template, 2, 1, \"span\", 2);\n        i0.ɵɵtemplate(4, ListWorkflowComponent_span_4_Template, 2, 0, \"span\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 3);\n        i0.ɵɵtemplate(6, ListWorkflowComponent_div_6_Template, 2, 0, \"div\", 4);\n        i0.ɵɵtemplate(7, ListWorkflowComponent_div_7_Template, 3, 2, \"div\", 5);\n        i0.ɵɵtemplate(8, ListWorkflowComponent_div_8_Template, 13, 2, \"div\", 6);\n        i0.ɵɵelementStart(9, \"div\", 7);\n        i0.ɵɵtemplate(10, ListWorkflowComponent_button_10_Template, 2, 0, \"button\", 8);\n        i0.ɵɵtemplate(11, ListWorkflowComponent_button_11_Template, 2, 0, \"button\", 8);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.employeeDetails);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.employeeIdFromQuery && ctx.isAdmin);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.loading && (ctx.workflows == null ? null : ctx.workflows.length) === 0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.loading && (ctx.workflows == null ? null : ctx.workflows.length) > 0);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.employeeIdFromQuery);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.employeeIdFromQuery && ctx.isAdmin);\n      }\n    },\n    dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i4.SelectControlValueAccessor, i4.NgControlStatus, i4.NgModel, i3.TitleCasePipe],\n    encapsulation: 2\n  });\n  return ListWorkflowComponent;\n})();","map":{"version":3,"mappings":"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","names":["first","Role","WorkflowStatus","WorkflowType","HttpErrorResponse","i0","ListWorkflowComponent","constructor","workflowService","alertService","accountService","employeeService","route","router","currentAccount","accountValue","isAdmin","role","Admin","ngOnDestroy","subscriptions","forEach","sub","unsubscribe","ngOnInit","queryParamsSubscription","queryParams","subscribe","params","employeeIdFromQuery","workflows","employeeDetails","loadEmployeeDetails","loadWorkflowsForEmployee","loadAllWorkflows","currentEmployeeId","employeeId","String","info","loading","getById","pipe","next","employee","error","err","formatError","getByEmployeeId","filteredWorkflows","filter","workflow","isRequestApprovalType","type","isTaskOnlyWorkflow","details","sortWorkflows","getAll","sort","a","b","dateA","Date","datetimecreated","getTime","dateB","onStatusSelected","newStatus","console","log","id","updateWorkflowStatus","requestId","JSON","parse","e","detailsText","boldMatch","match","plainMatch","hashMatch","updateWorkflowAndRequestStatus","updatedWorkflow","index","findIndex","w","success","openStatusChangeModal","status","find","x","pendingStatusChange","confirmMessage","ForReviewing","confirmModal","show","onStatusChangeConfirmed","isUpdating","changeStatus","deleteWorkflow","confirm","isDeleting","delete","getDetailsAsObject","includes","key","value","startsWith","requestType","requesterId","message","task","Object","entries","map","stringify","isPendingOrReviewing","Pending","keys","length","isCompletedOrApproved","Completed","Approved","isRejected","Rejected","canChangeStatus","goBackToEmployees","navigate","goBackToAdminDashboard","defaultMessage","RequestApproval","selectors","viewQuery"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\Restful-API-User-Management-System-backend-postrero\\frontend\\src\\app\\workflows\\list.component.ts","C:\\Users\\User\\Desktop\\Restful-API-User-Management-System-backend-postrero\\frontend\\src\\app\\workflows\\list.component.html"],"sourcesContent":["import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\nimport { WorkflowService, AlertService, AccountService, EmployeeService } from '@app/_services';\nimport { Account, Role } from '@app/_models';\nimport { WorkflowStatus, Workflow, WorkflowType } from '@app/_models/workflow';\nimport { ConfirmModalComponent } from './confirm-modal.component';\nimport { Employee } from '@app/_models/employee';\nimport { HttpErrorResponse } from '@angular/common/http';\n\n@Component({ templateUrl: 'list.component.html' })\nexport class ListWorkflowComponent implements OnInit, OnDestroy {\n  @ViewChild('confirmModal') confirmModal!: ConfirmModalComponent;\n  workflows: Workflow[] = [];\n  loading = false;\n  currentAccount: Account | null = null;\n  isAdmin = false;\n  employeeId: string | null = null;\n  displayEmployeeId: string | null = null;\n  confirmMessage: string = '';\n  notFound = false;\n  private pendingStatusChange: { id: string; status: WorkflowStatus } | null = null;\n  employeeIdFromQuery: string | null = null;\n  employeeDetails: Employee | null = null;\n\n  private queryParamsSubscription!: Subscription;\n  private statusUpdateWorkflow: Workflow | null = null;\n  // Make enum available in template\n  WorkflowStatus = WorkflowStatus;\n  Role = Role;\n\n  constructor(\n    private workflowService: WorkflowService,\n    private alertService: AlertService,\n    private accountService: AccountService,\n    private employeeService: EmployeeService,\n    private route: ActivatedRoute,\n    private router: Router\n  ) {\n    this.currentAccount = this.accountService.accountValue;\n    this.isAdmin = this.currentAccount?.role === Role.Admin;\n  }\n  private subscriptions: Subscription[] = [];\n\n  ngOnDestroy(): void {\n    // Unsubscribe from all subscriptions to prevent memory leaks\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  ngOnInit() {\n    this.queryParamsSubscription = this.route.queryParams.subscribe(params => {\n      this.employeeIdFromQuery = params['employeeId'];\n      this.workflows = [];\n      this.employeeDetails = null;\n\n      if (this.employeeIdFromQuery) {\n        this.loadEmployeeDetails(this.employeeIdFromQuery);\n        this.loadWorkflowsForEmployee(this.employeeIdFromQuery);\n      } else if (this.isAdmin) {\n        this.loadAllWorkflows();\n      } else {\n\n        const currentEmployeeId = this.employeeId;\n        if (currentEmployeeId) {\n          this.employeeIdFromQuery = String(currentEmployeeId);\n          this.loadEmployeeDetails(String(currentEmployeeId));\n          this.loadWorkflowsForEmployee(String(currentEmployeeId));\n        } else {\n          this.alertService.info(\"No employee specified, and your account is not linked to an employee record.\");\n          this.loading = false;\n        }\n      }\n    });\n  }\n\n  loadEmployeeDetails(employeeId: string) {\n    this.employeeService.getById(employeeId)\n      .pipe(first())\n      .subscribe({\n        next: (employee) => this.employeeDetails = employee,\n        error: (err) => this.alertService.error(this.formatError(err, 'Failed to load employee details'))\n      });\n  }\n\n  loadWorkflowsForEmployee(employeeId: string) {\n    this.loading = true;\n    this.workflowService.getByEmployeeId(employeeId)\n      .pipe(first())\n      .subscribe({\n        next: (workflows) => {\n          // Filter out task-only RequestApproval workflows\n          const filteredWorkflows = workflows.filter(workflow => \n            !(this.isRequestApprovalType(workflow.type) && this.isTaskOnlyWorkflow(workflow.details))\n          );\n          this.workflows = this.sortWorkflows(filteredWorkflows);\n          this.loading = false;\n        },\n        error: (err) => {\n          this.alertService.error(this.formatError(err, `Failed to load workflows for employee ${employeeId}`));\n          this.workflows = [];\n          this.loading = false;\n        }\n      });\n  }\n\n  loadAllWorkflows() {\n    this.loading = true;\n    this.workflowService.getAll()\n      .pipe(first())\n      .subscribe({\n        next: (workflows) => {\n          // Filter out task-only RequestApproval workflows\n          const filteredWorkflows = workflows.filter(workflow => \n            !(this.isRequestApprovalType(workflow.type) && this.isTaskOnlyWorkflow(workflow.details))\n          );\n          this.workflows = this.sortWorkflows(filteredWorkflows);\n          this.loading = false;\n        },\n        error: (err) => {\n          this.alertService.error(this.formatError(err, 'Failed to load all workflows'));\n          this.workflows = [];\n          this.loading = false;\n        }\n      });\n  }\n\n  private sortWorkflows(workflows: Workflow[]): Workflow[] {\n    return workflows.sort((a, b) => {\n      const dateA = new Date(a.datetimecreated || 0).getTime();\n      const dateB = new Date(b.datetimecreated || 0).getTime();\n      return dateB - dateA;\n    });\n  }\n\n  onStatusSelected(workflow: Workflow, newStatus: WorkflowStatus | string) {\n    console.log(`Status change selected for workflow ${workflow.id} to ${newStatus}`);\n    this.updateWorkflowStatus(workflow, newStatus as WorkflowStatus);\n  }\n\n  updateWorkflowStatus(workflow: Workflow, newStatus: WorkflowStatus) {\n    if (!workflow || !workflow.id) return;\n    \n    // Extract requestId from workflow details if this is a request approval workflow\n    let requestId = null;\n    if (this.isRequestApprovalType(workflow.type) && workflow.details) {\n      // Extract requestId from workflow details\n      let details: any = workflow.details;\n      \n      if (typeof details === 'string') {\n        try {\n          // Try to parse JSON first\n          details = JSON.parse(details);\n        } catch (e) {\n          // If parsing fails, try regex extraction methods\n          const detailsText = details;\n          const boldMatch = detailsText.match(/<b>requestId:<\\/b>\\s*(\\d+)/i);\n          if (boldMatch && boldMatch[1]) {\n            requestId = boldMatch[1];\n          } else {\n            const plainMatch = detailsText.match(/requestId:\\s*(\\d+)/i);\n            if (plainMatch && plainMatch[1]) {\n              requestId = plainMatch[1];\n            } else {\n              const hashMatch = detailsText.match(/request\\s+#(\\d+)/i);\n              if (hashMatch && hashMatch[1]) {\n                requestId = hashMatch[1];\n              }\n            }\n          }\n        }\n      }\n      \n      // If we have parsed JSON details, extract requestId\n      if (details && details.requestId) {\n        requestId = details.requestId;\n      }\n    }\n    \n    // Use the updateWorkflowAndRequestStatus method to update both entities\n    this.workflowService.updateWorkflowAndRequestStatus(workflow.id, newStatus, requestId)\n      .pipe(first())\n      .subscribe({\n        next: (updatedWorkflow) => {\n          const index = this.workflows.findIndex(w => w.id === updatedWorkflow.id);\n          if (index !== -1) {\n            this.workflows[index] = { ...this.workflows[index], ...updatedWorkflow };\n          }\n          this.alertService.success('Workflow status updated successfully!');\n        },\n        error: (err) => {\n          this.alertService.error(this.formatError(err, 'Failed to update workflow status'));\n        }\n      });\n  }\n\n  openStatusChangeModal(id: string, status: WorkflowStatus) {\n    const workflow = this.workflows.find(x => x.id === id);\n    if (!workflow) return;\n\n    this.pendingStatusChange = { id, status };\n    this.confirmMessage = `Are you sure you want to mark this workflow ${status === WorkflowStatus.ForReviewing ? 'for review' : 'as completed'}?`;\n    this.confirmModal.show();\n  }\n\n  onStatusChangeConfirmed() {\n    if (!this.pendingStatusChange) return;\n\n    const { id, status } = this.pendingStatusChange;\n    const workflow = this.workflows.find(x => x.id === id);\n    if (!workflow) return;\n\n    workflow.isUpdating = true;\n    this.workflowService.changeStatus(id, status)\n      .pipe(first())\n      .subscribe({\n        next: () => {\n          workflow.status = status;\n          workflow.isUpdating = false;\n          this.alertService.success('Workflow status updated successfully');\n        },\n        error: error => {\n          this.alertService.error(error);\n          workflow.isUpdating = false;\n        }\n      });\n\n    this.pendingStatusChange = null;\n  }\n\n  deleteWorkflow(id: string) {\n    const workflow = this.workflows.find(x => x.id === id);\n    if (!workflow) return;\n\n    if (confirm('Are you sure you want to delete this workflow?')) {\n      workflow.isDeleting = true;\n      this.workflowService.delete(id)\n        .pipe(first())\n        .subscribe({\n          next: () => {\n            this.workflows = this.workflows.filter(x => x.id !== id);\n            this.alertService.success('Workflow deleted successfully');\n          },\n          error: error => {\n            this.alertService.error(error);\n            workflow.isDeleting = false;\n          }\n        });\n    }\n  }\n\n  getDetailsAsObject(details: any): { key: string, value: any }[] {\n    // If workflow is an onboarding with a simple task description\n    if (typeof details === 'string') {\n      // Handle department transfer text directly\n      if (details.includes('Employee transferred from')) {\n        return [{ key: '', value: details }];\n      }\n      \n      // Handle task description\n      if (details.startsWith('Task:')) {\n        return [{ key: 'Task', value: details }];\n      }\n      \n      try {\n        details = JSON.parse(details);\n      } catch (e) {\n        // If parsing fails, just return the string as is\n        return [{ key: '', value: details }];\n      }\n    }\n    \n    // For Request Approval workflows, format in the standard way\n    if (details && details.requestId && details.requestType && details.requesterId && details.message) {\n      return [\n        { key: 'requestId', value: details.requestId },\n        { key: 'requestType', value: details.requestType },\n        { key: 'requesterId', value: details.requesterId },\n        { key: 'message', value: details.message }\n      ];\n    }\n    \n    // For task-based workflows, show only the task if not a Request Approval workflow\n    if (details && details.task) {\n      return [{ key: 'Task', value: details.task }];\n    }\n    \n    // Return the details as key-value pairs for other cases\n    return Object.entries(details || {})\n      .map(([key, value]) => ({ \n        key, \n        value: typeof value === 'object' ? JSON.stringify(value) : value \n      }));\n  }\n\n  isPendingOrReviewing(status: string): boolean {\n    return status === WorkflowStatus.Pending || status === WorkflowStatus.ForReviewing;\n  }\n\n  // Check if workflow details only contain a task field\n  isTaskOnlyWorkflow(details: any): boolean {\n    if (typeof details === 'string') {\n      try {\n        details = JSON.parse(details);\n      } catch (e) {\n        // If can't parse as JSON, it's likely just a string task\n        return true;\n      }\n    }\n    \n    // If it has only a task property and no others, it's a task-only workflow\n    return details && \n           details.task && \n           Object.keys(details).length === 1 && \n           !details.requestId && \n           !details.requestType && \n           !details.requesterId && \n           !details.message;\n  }\n\n  isCompletedOrApproved(status: string): boolean {\n    return status === WorkflowStatus.Completed || status === WorkflowStatus.Approved;\n  }\n\n  isRejected(status: string): boolean {\n    return status === WorkflowStatus.Rejected;\n  }\n\n  canChangeStatus(status: string): boolean {\n    return !(status === WorkflowStatus.Completed || status === WorkflowStatus.Rejected);\n  }\n\n  goBackToEmployees() {\n    this.router.navigate(['/admin/employees']);\n  }\n  goBackToAdminDashboard() {\n    this.router.navigate(['/admin']); // Or your main admin overview page\n  }\n\n  private formatError(error: HttpErrorResponse | Error, defaultMessage: string): string {\n    if (error instanceof HttpErrorResponse) {\n      return error.error?.message || error.message || defaultMessage;\n    }\n    return error.message || defaultMessage;\n  }\n\n  // Helper method to check if workflow is a request approval type\n  isRequestApprovalType(type: string | WorkflowType): boolean {\n    return type === WorkflowType.RequestApproval || type === 'Request Approval';\n  }\n} ","<div class=\"card\">\n  <div class=\"card-header\">\n    Workflows\n    <span *ngIf=\"employeeDetails\">for Employee {{ employeeDetails.employeeId }}</span>\n    <span *ngIf=\"!employeeIdFromQuery && isAdmin\"> - All Workflows</span>\n  </div>\n  <div class=\"card-body\">\n    <div *ngIf=\"loading\" class=\"text-center\">\n      <span class=\"spinner-border spinner-border-lg align-center\"></span>\n    </div>\n\n    <div *ngIf=\"!loading && workflows?.length === 0\" class=\"text-center text-muted\">\n      <p *ngIf=\"employeeIdFromQuery\">No workflows found for this employee.</p>\n      <p *ngIf=\"!employeeIdFromQuery\">No workflows found.</p>\n    </div>\n\n    <div *ngIf=\"!loading && workflows?.length > 0\" class=\"table-responsive\">\n      <table class=\"table table-striped align-middle\">\n        <thead>\n          <tr>\n            <th>Type</th>\n            <th>Details</th>\n            <th>Status</th>\n            <th *ngIf=\"isAdmin\">Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let workflow of workflows\">\n            <td>{{ workflow.type }}</td>\n            <td>\n              <ng-container *ngIf=\"workflow.details\">\n                <ng-container *ngIf=\"!(isRequestApprovalType(workflow.type) && isTaskOnlyWorkflow(workflow.details))\">\n                  <ng-container *ngFor=\"let entry of getDetailsAsObject(workflow.details)\">\n                    <div *ngIf=\"entry.key\"><b>{{ entry.key | titlecase }}:</b> {{ entry.value }}</div>\n                    <div *ngIf=\"!entry.key\">{{ entry.value }}</div>\n                  </ng-container>\n                </ng-container>\n              </ng-container>\n            </td>\n            <td>\n              <span class=\"badge\" [ngClass]=\"{\n                  'bg-warning text-dark': workflow.status === WorkflowStatus.Pending || workflow.status === WorkflowStatus.ForReviewing,\n                  'bg-success': workflow.status === WorkflowStatus.Completed || workflow.status === WorkflowStatus.Approved,\n                  'bg-danger': workflow.status === WorkflowStatus.Rejected\n                }\">\n                {{ workflow.status }}\n              </span>\n            </td>\n            <td *ngIf=\"isAdmin\">\n              <select class=\"form-select form-select-sm d-inline-block w-auto\" [(ngModel)]=\"workflow.status\"\n                (ngModelChange)=\"onStatusSelected(workflow, $event)\"\n                [disabled]=\"workflow.status === WorkflowStatus.Completed || workflow.status === WorkflowStatus.Rejected\">\n                <option [ngValue]=\"WorkflowStatus.Pending\">Pending</option>\n                <option [ngValue]=\"WorkflowStatus.Approved\">Approved\n                </option>\n                <option [ngValue]=\"WorkflowStatus.Rejected\">Rejected\n                </option>\n              </select>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n    <div class=\"mt-3 text-end\">\n      <button class=\"btn btn-secondary\" (click)=\"goBackToEmployees()\" *ngIf=\"employeeIdFromQuery\">Back to Employees\n        </button>\n      <button class=\"btn btn-secondary\" (click)=\"goBackToAdminDashboard()\" *ngIf=\"!employeeIdFromQuery && isAdmin\">Back\n        to Admin Dashboard</button>\n    </div>\n  </div>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}