{"ast":null,"code":"import { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nconst baseUrl = `${environment.apiUrl}/accounts`;\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      this.refreshTokenValue = null;\n      // Add to AccountService\n      this.departmentsUrl = `${environment.apiUrl}/departments`;\n      // Add to AccountService\n      this.employeesUrl = `${environment.apiUrl}/employees`;\n      this.requestsUrl = `${environment.apiUrl}/requests`;\n      this.workflowsUrl = `${environment.apiUrl}/workflows`;\n      // Initialize account from localStorage if available\n      const storedAccount = localStorage.getItem('account');\n      this.accountSubject = new BehaviorSubject(storedAccount ? JSON.parse(storedAccount) : null);\n      this.account = this.accountSubject.asObservable();\n      // Initialize refresh token from cookie if available\n      this.refreshTokenValue = this.getRefreshToken();\n      // Start refresh token timer if we have an account\n      if (this.accountValue) {\n        this.startRefreshTokenTimer();\n      }\n    }\n    get accountValue() {\n      return this.accountSubject.value;\n    }\n    login(email, password) {\n      console.log('Attempting login with:', {\n        email\n      });\n      return this.http.post(`${baseUrl}/authenticate`, {\n        email,\n        password\n      }, {\n        withCredentials: true\n      }).pipe(map(account => {\n        console.log('Login successful:', account);\n        // Store account in localStorage\n        localStorage.setItem('account', JSON.stringify(account));\n        this.accountSubject.next(account);\n        if (account.refreshToken) {\n          this.refreshTokenValue = account.refreshToken;\n        }\n        this.startRefreshTokenTimer();\n        return account;\n      }));\n    }\n    logout() {\n      this.http.post(`${baseUrl}/revoke-token`, {\n        token: this.refreshTokenValue\n      }, {\n        withCredentials: true\n      }).subscribe();\n      this.stopRefreshTokenTimer();\n      this.refreshTokenValue = null;\n      // Remove account from localStorage\n      localStorage.removeItem('account');\n      this.accountSubject.next(null);\n      this.router.navigate(['/account/login']);\n    }\n    refreshToken() {\n      if (!this.refreshTokenValue) {\n        return new Observable(subscriber => {\n          subscriber.complete();\n        });\n      }\n      return this.http.post(`${baseUrl}/refresh-token`, {\n        token: this.refreshTokenValue\n      }, {\n        withCredentials: true\n      }).pipe(map(account => {\n        // Update account in localStorage\n        localStorage.setItem('account', JSON.stringify(account));\n        this.accountSubject.next(account);\n        if (account.refreshToken) {\n          this.refreshTokenValue = account.refreshToken;\n        }\n        this.startRefreshTokenTimer();\n        return account;\n      }));\n    }\n    register(account) {\n      return this.http.post(`${baseUrl}/register`, account);\n    }\n    verifyEmail(token) {\n      return this.http.post(`${baseUrl}/verify-email`, {\n        token\n      });\n    }\n    forgotPassword(email) {\n      return this.http.post(`${baseUrl}/forgot-password`, {\n        email\n      });\n    }\n    validateResetToken(token) {\n      return this.http.post(`${baseUrl}/validate-reset-token`, {\n        token\n      });\n    }\n    resetPassword(token, password, confirmPassword) {\n      return this.http.post(`${baseUrl}/reset-password`, {\n        token,\n        password,\n        confirmPassword\n      });\n    }\n    getAll() {\n      return this.http.get(baseUrl);\n    }\n    getById(id) {\n      return this.http.get(`${baseUrl}/${id}`);\n    }\n    create(params) {\n      return this.http.post(baseUrl, params);\n    }\n    getDepartmentById(id) {\n      return this.http.get(`${this.departmentsUrl}/${id}`);\n    }\n    createDepartment(params) {\n      return this.http.post(this.departmentsUrl, params);\n    }\n    updateDepartment(id, params) {\n      return this.http.put(`${this.departmentsUrl}/${id}`, params);\n    }\n    getAllDepartments() {\n      return this.http.get(this.departmentsUrl);\n    }\n    deleteDepartment(id) {\n      return this.http.delete(`${this.departmentsUrl}/${id}`);\n    }\n    getAllUsers() {\n      return this.http.get(`${baseUrl}/active`).pipe(map(accounts => {\n        console.log('Fetched active accounts:', accounts);\n        return accounts.map(account => ({\n          id: account.id,\n          email: account.email,\n          role: account.role,\n          fullName: `${account.firstName || ''} ${account.lastName || ''}`.trim()\n        }));\n      }));\n    }\n    getEmployeeById(id) {\n      return this.http.get(`${this.employeesUrl}/${id}`);\n    }\n    createEmployee(params) {\n      return this.http.post(this.employeesUrl, params);\n    }\n    updateEmployee(id, params) {\n      return this.http.put(`${this.employeesUrl}/${id}`, params);\n    }\n    deleteEmployee(id) {\n      return this.http.delete(`${this.employeesUrl}/${id}`);\n    }\n    getRequestById(id) {\n      return this.http.get(`${this.requestsUrl}/${id}`);\n    }\n    createRequest(params) {\n      return this.http.post(this.requestsUrl, params);\n    }\n    updateRequest(id, params) {\n      return this.http.put(`${this.requestsUrl}/${id}`, params);\n    }\n    getAllRequests() {\n      return this.http.get(this.requestsUrl);\n    }\n    deleteRequest(id) {\n      return this.http.delete(`${this.requestsUrl}/${id}`);\n    }\n    getEmployeeWorkflows(employeeId) {\n      return this.http.get(`${this.workflowsUrl}/employee/${employeeId}`);\n    }\n    updateWorkflowStatus(workflowId, params) {\n      return this.http.put(`${this.workflowsUrl}/${workflowId}/status`, params);\n    }\n    update(id, params) {\n      return this.http.put(`${baseUrl}/${id}`, params).pipe(map(account => {\n        var _a;\n        // update the current account if it was updated\n        if (account.id === ((_a = this.accountValue) === null || _a === void 0 ? void 0 : _a.id)) {\n          // publish updated account to subscribers\n          const updatedAccount = Object.assign(Object.assign({}, this.accountValue), account);\n          this.accountSubject.next(updatedAccount);\n        }\n        return account;\n      }));\n    }\n    delete(id) {\n      return this.http.delete(`${baseUrl}/${id}`).pipe(map(x => {\n        var _a;\n        // auto logout if the logged in account deleted their own record\n        if (id === ((_a = this.accountValue) === null || _a === void 0 ? void 0 : _a.id)) {\n          this.logout();\n        }\n        return x;\n      }));\n    }\n    getAccountByUserId(userId) {\n      if (userId === undefined || userId === null) {\n        return undefined;\n      }\n      // In the context of the FakeBackend, all \"accounts\" are stored in localStorage\n      // under the key used by the FakeBackendInterceptor.\n      const accountsKey = 'accounts'; // Define the key used in localStorage\n      const allAccountsFromStorage = JSON.parse(localStorage.getItem(accountsKey) || '[]');\n      // The 'userId' in your Employee model is meant to link to the 'id' of an Account.\n      return allAccountsFromStorage.find(acc => Number(acc.id) === Number(userId));\n    }\n    startRefreshTokenTimer() {\n      // parse json object from base64 encoded jwt token\n      const jwtToken = JSON.parse(atob(this.accountValue.jwtToken.split('.')[1]));\n      // set a timeout to refresh the token a minute before it expires\n      const expires = new Date(jwtToken.exp * 1000);\n      const timeout = expires.getTime() - Date.now() - 60 * 1000;\n      this.refreshTokenTimeout = setTimeout(() => this.refreshToken().subscribe(), timeout);\n    }\n    stopRefreshTokenTimer() {\n      clearTimeout(this.refreshTokenTimeout);\n    }\n    getNextEmployeeId() {\n      return this.http.get(`${this.employeesUrl}/nextId`);\n    }\n    getRefreshToken() {\n      // get refresh token from cookie\n      return (document.cookie.split(';').find(x => x.includes('fakeRefreshToken')) || '=').split('=')[1];\n    }\n  }\n  AccountService.ɵfac = function AccountService_Factory(t) {\n    return new (t || AccountService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n  AccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountService,\n    factory: AccountService.ɵfac,\n    providedIn: 'root'\n  });\n  return AccountService;\n})();","map":{"version":3,"mappings":"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","names":["BehaviorSubject","Observable","map","environment","baseUrl","apiUrl","AccountService","constructor","router","http","storedAccount","localStorage","getItem","accountSubject","JSON","parse","account","asObservable","refreshTokenValue","getRefreshToken","accountValue","startRefreshTokenTimer","value","login","email","password","console","log","post","withCredentials","pipe","setItem","stringify","next","refreshToken","logout","token","subscribe","stopRefreshTokenTimer","removeItem","navigate","subscriber","complete","register","verifyEmail","forgotPassword","validateResetToken","resetPassword","confirmPassword","getAll","get","getById","id","create","params","getDepartmentById","departmentsUrl","createDepartment","updateDepartment","put","getAllDepartments","deleteDepartment","delete","getAllUsers","accounts","role","fullName","firstName","lastName","trim","getEmployeeById","employeesUrl","createEmployee","updateEmployee","deleteEmployee","getRequestById","requestsUrl","createRequest","updateRequest","getAllRequests","deleteRequest","getEmployeeWorkflows","employeeId","workflowsUrl","updateWorkflowStatus","workflowId","update","updatedAccount","x","getAccountByUserId","userId","undefined","accountsKey","allAccountsFromStorage","find","acc","Number","jwtToken","atob","split","expires","Date","exp","timeout","getTime","now","refreshTokenTimeout","setTimeout","clearTimeout","getNextEmployeeId","document","cookie","includes","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\Restful-API-User-Management-System-backend-postrero\\frontend\\src\\app\\_services\\account.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, finalize } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport { Account } from '@app/_models';\n\nconst baseUrl = `${environment.apiUrl}/accounts`;\n\n@Injectable({ providedIn: 'root' })\nexport class AccountService {\n    private accountSubject: BehaviorSubject<Account>;\n    public account: Observable<Account>;\n    private refreshTokenValue: string | null = null;\n\n    constructor(\n        private router: Router,\n        private http: HttpClient\n    ) {\n        // Initialize account from localStorage if available\n        const storedAccount = localStorage.getItem('account');\n        this.accountSubject = new BehaviorSubject<Account>(storedAccount ? JSON.parse(storedAccount) : null);\n        this.account = this.accountSubject.asObservable();\n        \n        // Initialize refresh token from cookie if available\n        this.refreshTokenValue = this.getRefreshToken();\n        \n        // Start refresh token timer if we have an account\n        if (this.accountValue) {\n            this.startRefreshTokenTimer();\n        }\n    }\n\n    public get accountValue(): Account {\n        return this.accountSubject.value;\n    }\n\n    login(email: string, password: string) {\n        console.log('Attempting login with:', { email });\n        return this.http.post<any>(`${baseUrl}/authenticate`, { email, password }, { withCredentials: true })\n            .pipe(\n                map(account => {\n                    console.log('Login successful:', account);\n                    // Store account in localStorage\n                    localStorage.setItem('account', JSON.stringify(account));\n                    this.accountSubject.next(account);\n                    if (account.refreshToken) {\n                        this.refreshTokenValue = account.refreshToken;\n                    }\n                    this.startRefreshTokenTimer();\n                    return account;\n                })\n            );\n    }\n\n    logout() {\n        this.http.post<any>(`${baseUrl}/revoke-token`, { token: this.refreshTokenValue }, { withCredentials: true }).subscribe();\n        this.stopRefreshTokenTimer();\n        this.refreshTokenValue = null;\n        // Remove account from localStorage\n        localStorage.removeItem('account');\n        this.accountSubject.next(null);\n        this.router.navigate(['/account/login']);\n    }\n\n    refreshToken() {\n        if (!this.refreshTokenValue) {\n            return new Observable(subscriber => {\n                subscriber.complete();\n            });\n        }\n\n        return this.http.post<any>(`${baseUrl}/refresh-token`, { token: this.refreshTokenValue }, { withCredentials: true })\n            .pipe(\n                map((account) => {\n                    // Update account in localStorage\n                    localStorage.setItem('account', JSON.stringify(account));\n                    this.accountSubject.next(account);\n                    if (account.refreshToken) {\n                        this.refreshTokenValue = account.refreshToken;\n                    }\n                    this.startRefreshTokenTimer();\n                    return account;\n                })\n            );\n    }\n\n    register(account: Account) {\n        return this.http.post(`${baseUrl}/register`, account);\n    }\n\n    verifyEmail(token: string) {\n        return this.http.post(`${baseUrl}/verify-email`, { token });\n    }\n\n    forgotPassword(email: string) {\n        return this.http.post(`${baseUrl}/forgot-password`, { email });\n    }\n\n    validateResetToken(token: string) {\n        return this.http.post(`${baseUrl}/validate-reset-token`, { token });\n    }\n\n    resetPassword(token: string, password: string, confirmPassword: string) {\n        return this.http.post(`${baseUrl}/reset-password`, { token, password, confirmPassword });\n    }\n\n    getAll(): Observable<Account[]> {\n        return this.http.get<Account[]>(baseUrl);\n    }\n\n    getById(id: string): Observable<Account> {\n        return this.http.get<Account>(`${baseUrl}/${id}`);\n    }\n\n    create(params: any): Observable<any> {\n        return this.http.post(baseUrl, params);\n    }\n\n    // Add to AccountService\n    private departmentsUrl = `${environment.apiUrl}/departments`;\n\n    getDepartmentById(id: string): Observable<any> {\n        return this.http.get(`${this.departmentsUrl}/${id}`);\n    }\n\n    createDepartment(params: any): Observable<any> {\n        return this.http.post(this.departmentsUrl, params);\n    }\n\n    updateDepartment(id: string, params: any): Observable<any> {\n        return this.http.put(`${this.departmentsUrl}/${id}`, params);\n    }\n    getAllDepartments(): Observable<any[]> {\n        return this.http.get<any[]>(this.departmentsUrl);\n    }\n\n    deleteDepartment(id: string): Observable<any> {\n        return this.http.delete(`${this.departmentsUrl}/${id}`);\n    }\n\n    // Add to AccountService\n    private employeesUrl = `${environment.apiUrl}/employees`;\n\n    getAllUsers(): Observable<any[]> {\n        return this.http.get<any[]>(`${baseUrl}/active`).pipe(\n            map(accounts => {\n                console.log('Fetched active accounts:', accounts);\n                return accounts.map(account => ({\n                    id: account.id,\n                    email: account.email,\n                    role: account.role,\n                    fullName: `${account.firstName || ''} ${account.lastName || ''}`.trim()\n                }));\n            })\n        );\n    }\n\n    getEmployeeById(id: string): Observable<any> {\n        return this.http.get(`${this.employeesUrl}/${id}`);\n    }\n\n    createEmployee(params: any): Observable<any> {\n        return this.http.post(this.employeesUrl, params);\n    }\n\n    updateEmployee(id: string, params: any): Observable<any> {\n        return this.http.put(`${this.employeesUrl}/${id}`, params);\n    }\n    deleteEmployee(id: string): Observable<any> {\n        return this.http.delete(`${this.employeesUrl}/${id}`);\n    }\n\n    private requestsUrl = `${environment.apiUrl}/requests`;\n\n    getRequestById(id: string): Observable<any> {\n        return this.http.get(`${this.requestsUrl}/${id}`);\n    }\n\n    createRequest(params: any): Observable<any> {\n        return this.http.post(this.requestsUrl, params);\n    }\n\n    updateRequest(id: string, params: any): Observable<any> {\n        return this.http.put(`${this.requestsUrl}/${id}`, params);\n    }\n\n    getAllRequests(): Observable<any[]> {\n        return this.http.get<any[]>(this.requestsUrl);\n    }\n\n    deleteRequest(id: string): Observable<any> {\n        return this.http.delete(`${this.requestsUrl}/${id}`);\n    }\n    private workflowsUrl = `${environment.apiUrl}/workflows`;\n\n    getEmployeeWorkflows(employeeId: string): Observable<any[]> {\n        return this.http.get<any[]>(`${this.workflowsUrl}/employee/${employeeId}`);\n    }\n\n    updateWorkflowStatus(workflowId: string, params: any): Observable<any> {\n        return this.http.put(`${this.workflowsUrl}/${workflowId}/status`, params);\n    }\n    update(id: string, params: any): Observable<Account> {\n        return this.http.put(`${baseUrl}/${id}`, params)\n            .pipe(map((account: Account) => {\n                // update the current account if it was updated\n                if (account.id === this.accountValue?.id) {\n                    // publish updated account to subscribers\n                    const updatedAccount = { ...this.accountValue, ...account };\n                    this.accountSubject.next(updatedAccount);\n                }\n                return account;\n            }));\n    }\n\n    delete(id: string) {\n        return this.http.delete(`${baseUrl}/${id}`)\n            .pipe(map(x => {\n                // auto logout if the logged in account deleted their own record\n                if (id === this.accountValue?.id) {\n                    this.logout();\n                }\n                return x;\n            }));\n    }\n\n    public getAccountByUserId(userId: number | undefined): Account | undefined {\n        if (userId === undefined || userId === null) {\n            return undefined;\n        }\n        // In the context of the FakeBackend, all \"accounts\" are stored in localStorage\n        // under the key used by the FakeBackendInterceptor.\n        const accountsKey = 'accounts'; // Define the key used in localStorage\n        const allAccountsFromStorage = JSON.parse(localStorage.getItem(accountsKey) || '[]') as Account[];\n        // The 'userId' in your Employee model is meant to link to the 'id' of an Account.\n        return allAccountsFromStorage.find(acc => Number(acc.id) === Number(userId));\n    }\n\n\n    // helper methods\n    private refreshTokenTimeout: any;\n\n    private startRefreshTokenTimer() {\n        // parse json object from base64 encoded jwt token\n        const jwtToken = JSON.parse(atob(this.accountValue.jwtToken.split('.')[1]));\n\n        // set a timeout to refresh the token a minute before it expires\n        const expires = new Date(jwtToken.exp * 1000);\n        const timeout = expires.getTime() - Date.now() - (60 * 1000);\n        this.refreshTokenTimeout = setTimeout(() => this.refreshToken().subscribe(), timeout);\n    }\n\n    private stopRefreshTokenTimer() {\n        clearTimeout(this.refreshTokenTimeout);\n    }\n\n    getNextEmployeeId(): Observable<{ employeeId: string }> {\n        return this.http.get<{ employeeId: string }>(`${this.employeesUrl}/nextId`);\n    }\n\n    private getRefreshToken(): string | null {\n        // get refresh token from cookie\n        return (document.cookie.split(';').find(x => x.includes('fakeRefreshToken')) || '=').split('=')[1];\n    }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}