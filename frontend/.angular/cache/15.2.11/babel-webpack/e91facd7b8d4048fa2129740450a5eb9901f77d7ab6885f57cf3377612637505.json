{"ast":null,"code":"import { HttpResponse, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, mergeMap, materialize, dematerialize } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nimport { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\n// array in local storage for accounts\nconst accountsKey = 'angular-10-registration-login-example-accounts';\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n// in-memory data\nlet employees = [{\n  id: 1,\n  employeeId: 'EMP001',\n  userId: 1,\n  position: 'Developer',\n  departmentId: 1,\n  hireDate: '2025-01-01',\n  status: 'Active'\n}, {\n  id: 2,\n  employeeId: 'EMP002',\n  userId: 2,\n  position: 'Designer',\n  departmentId: 2,\n  hireDate: '2025-02-01',\n  status: 'Active'\n}];\nlet departments = [{\n  id: 1,\n  name: 'Engineering',\n  description: 'Software development team',\n  employeeCount: 1\n}, {\n  id: 2,\n  name: 'Marketing',\n  description: 'Marketing team',\n  employeeCount: 1\n}];\nlet workflows = [{\n  id: 1,\n  employeeId: 1,\n  type: 'Onboarding',\n  details: 'Task: Setup workstation',\n  status: 'Pending'\n}];\nlet requests = [{\n  id: 1,\n  employeeId: 1,\n  type: 'Equipment',\n  requestItems: [{\n    name: 'Laptop',\n    quantity: 1\n  }, {\n    name: 'Monitor',\n    quantity: 2\n  }],\n  status: 'Pending'\n}, {\n  id: 2,\n  employeeId: 1,\n  type: 'Resources',\n  requestItems: [{\n    name: 'Visual Studio',\n    quantity: 1\n  }, {\n    name: 'Office 365',\n    quantity: 1\n  }],\n  status: 'Approved'\n}, {\n  id: 3,\n  employeeId: 2,\n  type: 'Resources',\n  requestItems: [{\n    name: 'Adobe Illustrator Course',\n    quantity: 1\n  }],\n  status: 'Rejected'\n}, {\n  id: 4,\n  employeeId: 2,\n  type: 'Equipment',\n  requestItems: [{\n    name: 'Drawing Tablet',\n    quantity: 1\n  }],\n  status: 'Pending'\n}];\nexport let FakeBackendInterceptor = /*#__PURE__*/(() => {\n  class FakeBackendInterceptor {\n    constructor(alertService) {\n      this.alertService = alertService;\n    }\n    intercept(request, next) {\n      const {\n        url,\n        method,\n        headers,\n        body\n      } = request;\n      const alertService = this.alertService;\n      // Extract the path from the URL (remove the API prefix if present)\n      const apiUrl = environment.apiUrl;\n      const path = url.startsWith(apiUrl) ? url.substring(apiUrl.length) : url;\n      return of(null).pipe(mergeMap(() => handleRoute())).pipe(materialize()).pipe(delay(500)).pipe(dematerialize());\n      function handleRoute() {\n        switch (true) {\n          // Account endpoints\n          case path.endsWith('/accounts/authenticate') && method === 'POST':\n            return authenticate();\n          case path.endsWith('/accounts/refresh-token') && method === 'POST':\n            return refreshToken();\n          case path.endsWith('/accounts/revoke-token') && method === 'POST':\n            return revokeToken();\n          case path.endsWith('/accounts/register') && method === 'POST':\n            return register();\n          case path.endsWith('/accounts/verify-email') && method === 'POST':\n            return verifyEmail();\n          case path.endsWith('/accounts/forgot-password') && method === 'POST':\n            return forgotPassword();\n          case path.endsWith('/accounts/validate-reset-token') && method === 'POST':\n            return validateResetToken();\n          case path.endsWith('/accounts/reset-password') && method === 'POST':\n            return resetPassword();\n          case path.endsWith('/accounts') && method === 'GET':\n            return getAccounts();\n          case path.endsWith('/accounts/active') && method === 'GET':\n            return getActiveAccounts();\n          case path.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n            return getAccountById();\n          case path.endsWith('/accounts') && method === 'POST':\n            return createAccount();\n          case path.match(/\\/accounts\\/\\d+$/) && method === 'PUT':\n            return updateAccount();\n          // Employee endpoints\n          case path.endsWith('/employees') && method === 'GET':\n            return authorize(null, () => getEmployees());\n          case path.endsWith('/employees/nextId') && method === 'GET':\n            return authorize(null, () => getNextEmployeeId());\n          case path.endsWith('/employees') && method === 'POST':\n            return authorize(Role.Admin, () => createEmployee());\n          case path.match(/\\/employees\\/\\d+$/) && method === 'GET':\n            return authorize(null, () => getEmployeeById());\n          case path.match(/\\/employees\\/\\d+\\/with-details$/) && method === 'GET':\n            return authorize(null, () => getEmployeeWithDetails());\n          case path.match(/\\/employees\\/\\d+$/) && method === 'PUT':\n            return authorize(Role.Admin, () => updateEmployee());\n          case path.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'POST':\n            return authorize(Role.Admin, () => transferEmployee());\n          // Department endpoints\n          case path.endsWith('/departments') && method === 'GET':\n            return authorize(null, () => getDepartments());\n          case path.endsWith('/departments') && method === 'POST':\n            return authorize(Role.Admin, () => createDepartment());\n          case path.match(/\\/departments\\/\\d+$/) && method === 'GET':\n            return authorize(null, () => getDepartmentById());\n          case path.match(/\\/departments\\/\\d+$/) && method === 'PUT':\n            return authorize(Role.Admin, () => updateDepartment());\n          // Workflow endpoints\n          case path.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET':\n            return authorize(null, () => getEmployeeWorkflows());\n          case path.endsWith('/workflows') && method === 'GET':\n            return authorize(null, () => getAllWorkflows());\n          case path.endsWith('/workflows') && method === 'POST':\n            return authorize(Role.Admin, () => createWorkflow());\n          case path.match(/\\/workflows\\/\\d+\\/status$/) && method === 'PUT':\n            return authorize(Role.Admin, () => updateWorkflow());\n          case path.match(/\\/workflows\\/\\d+$/) && method === 'PUT':\n            return authorize(Role.Admin, () => updateWorkflow());\n          // Request endpoints\n          case path.endsWith('/requests') && method === 'GET':\n            return authorize(null, () => getRequests());\n          case path.match(/\\/requests\\?employeeId=\\d+$/) && method === 'GET':\n            return authorize(null, () => getRequestsByEmployeeId());\n          case path.match(/\\/requests\\/\\d+$/) && method === 'GET':\n            return authorize(null, () => getRequestById());\n          case path.endsWith('/requests') && method === 'POST':\n            return authorize(null, () => createRequest());\n          case path.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n            return authorize(Role.Admin, () => updateRequest());\n          default:\n            // pass through any requests not handled above\n            return next.handle(request);\n        }\n      }\n      // Account route functions\n      function authenticate() {\n        const {\n          email,\n          password\n        } = body;\n        const account = accounts.find(x => x.email === email);\n        if (!account) {\n          return error('Email does not exist');\n        }\n        if (!account.isVerified) {\n          // Display verification email alert\n          setTimeout(() => {\n            const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n            alertService.info(`\n                        <h4>Verification Email</h4>\n                        <p>Please click the below link to verify your email address:</p>\n                        <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    `, {\n              autoClose: false\n            });\n          }, 1000);\n          return error('Email is not yet verified');\n        }\n        if (account.password !== password) {\n          return error('Incorrect password');\n        }\n        if (account.status !== 'Active') {\n          return error('Account is inactive. Please contact system administrator.');\n        }\n        account.refreshTokens.push(generateRefreshToken());\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account)\n        }));\n      }\n      function refreshToken() {\n        const refreshToken = getRefreshToken();\n        if (!refreshToken) return unauthorized();\n        const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n        if (!account) return unauthorized();\n        // replace old refresh token with a new one and save\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        account.refreshTokens.push(generateRefreshToken());\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account)\n        }));\n      }\n      function revokeToken() {\n        if (!isAuthenticated()) return unauthorized();\n        const refreshToken = getRefreshToken();\n        const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n        // revoke token and save\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function register() {\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          // display email already registered message in alert\n          setTimeout(() => {\n            alertService.info(`\n                        <h4>Email Already Registered</h4>\n                        <p>Your email ${account.email} is already registered.</p>\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                        <div>\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\n                        </div>\n                    `, {\n              autoclose: false\n            });\n          }, 1000);\n          // always return ok() response to prevent email enumeration\n          return ok();\n        }\n        // assign account id and a few other properties then save\n        account.id = newAccountId();\n        if (account.id === 1) {\n          // First registered account is an admin and active\n          account.role = Role.Admin;\n          account.status = 'Active'; // Admin accounts get active status\n          account.isVerified = true; // First account is automatically verified\n          // Save account without verification token\n          account.refreshTokens = [];\n          delete account.confirmPassword;\n          accounts.push(account);\n          localStorage.setItem(accountsKey, JSON.stringify(accounts));\n          // Slight delay for the info message so the success message appears first\n          setTimeout(() => {\n            alertService.info(`\n                        <h4>First User Login</h4>\n                        <p>You can login directly as first user where role is Admin and account is verified</p>\n                        <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                    `, {\n              autoClose: true,\n              priority: 5,\n              timeout: 5000\n            });\n          }, 200);\n          return ok({\n            message: 'Admin registration successful. You can login directly.'\n          });\n        } else {\n          // Regular user accounts\n          account.role = Role.User;\n          account.status = 'Inactive'; // User accounts get inactive status upon creation\n          account.dateCreated = new Date().toISOString();\n          account.verificationToken = new Date().getTime().toString();\n          account.isVerified = false;\n          account.refreshTokens = [];\n          delete account.confirmPassword;\n          accounts.push(account);\n          localStorage.setItem(accountsKey, JSON.stringify(accounts));\n          // display verification email in alert\n          setTimeout(() => {\n            const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n            alertService.info(`\n                        <h4>Verification Email</h4>\n                        <p>Thanks for registering!</p>\n                        <p>Please click the below link to verify your email address:</p>\n                        <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                        <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                    `, {\n              autoclose: false\n            });\n          }, 1000);\n          return ok({\n            message: 'Registration successful, please check your email for verification instructions'\n          });\n        }\n      }\n      function verifyEmail() {\n        const {\n          token\n        } = body;\n        const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n        if (!account) return error('Verification failed');\n        // set is verified flag to true if token is valid\n        account.isVerified = true;\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function forgotPassword() {\n        const {\n          email\n        } = body;\n        const account = accounts.find(x => x.email === email);\n        // always return ok() response to prevent email enumeration\n        if (!account) return ok();\n        // create reset token that expires after 24 hours\n        account.resetToken = new Date().getTime().toString();\n        account.resetTokenExpires = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString();\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // display password reset email in alert\n        setTimeout(() => {\n          const resetUrl = `${location.origin}/account/reset-password?token=${account.resetToken}`;\n          alertService.info(`\n                    <h4>Reset Password Email</h4>\n                    <p>Please click the below link to reset your password, the link will be valid for 1 day:</p>\n                    <p><a href=\"${resetUrl}\">${resetUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, {\n            autoClose: false\n          });\n        }, 1000);\n        return ok();\n      }\n      function validateResetToken() {\n        const {\n          token\n        } = body;\n        const account = accounts.find(x => !!x.resetToken && x.resetToken === token && new Date() < new Date(x.resetTokenExpires));\n        if (!account) return error(\"Invalid token\");\n        return ok();\n      }\n      function resetPassword() {\n        const {\n          token,\n          password\n        } = body;\n        const account = accounts.find(x => !!x.resetToken && x.resetToken === token && new Date() < new Date(x.resetTokenExpires));\n        if (!account) return error('Invalid token');\n        // update password and remove reset token\n        account.password = password;\n        account.isVerified = true;\n        delete account.resetToken;\n        delete account.resetTokenExpires;\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function getAccounts() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(accounts.map(x => basicDetails(x)));\n      }\n      // New function to get only active accounts for employee creation\n      function getActiveAccounts() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(accounts.filter(x => x.status === 'Active').map(x => basicDetails(x)));\n      }\n      function getAccountById() {\n        if (!isAuthenticated()) return unauthorized();\n        let account = accounts.find(x => x.id === idFromUrl());\n        // user accounts can get own profile and admin accounts can get all profiles\n        if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {\n          return unauthorized();\n        }\n        return ok(basicDetails(account));\n      }\n      function createAccount() {\n        if (!isAuthorized(Role.Admin)) return unauthorized();\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          return error(`Email ${account.email} is already registered`);\n        }\n        // assign account id and a few other properties then save\n        account.id = newAccountId();\n        account.status = 'Inactive';\n        account.dateCreated = new Date().toISOString();\n        account.isVerified = true;\n        account.refreshTokens = [];\n        delete account.confirmPassword;\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function updateAccount() {\n        if (!isAuthenticated()) return unauthorized();\n        let params = body;\n        let account = accounts.find(x => x.id == idFromUrl());\n        // Check if account exists\n        if (!account) {\n          return error('Account not found');\n        }\n        // user accounts can update own profile and admin accounts can update all profiles\n        if (account.id != currentAccount().id && !isAuthorized(Role.Admin)) {\n          return unauthorized();\n        }\n        // only update password if included\n        if (!params.password) {\n          delete params.password;\n        }\n        // update and save account\n        Object.assign(account, params);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(basicDetails(account));\n      }\n      // Employee route functions\n      function getEmployees() {\n        // Map employees with account and department information\n        const enrichedEmployees = employees.map(employee => {\n          const user = accounts.find(a => a.id === employee.userId);\n          // Get department details\n          const department = departments.find(d => d.id === employee.departmentId);\n          // Create a response with the related details\n          return Object.assign(Object.assign({}, employee), {\n            User: user ? {\n              id: user.id,\n              email: user.email,\n              role: user.role,\n              firstName: user.firstName,\n              lastName: user.lastName\n            } : null,\n            Department: department ? {\n              id: department.id,\n              name: department.name\n            } : null\n          });\n        });\n        return ok(enrichedEmployees);\n      }\n      function createEmployee() {\n        // Generate employee ID in format 'EMP' + padded number if not provided\n        let employeeId = body.employeeId;\n        if (!employeeId || !employeeId.trim()) {\n          const nextId = employees.length + 1;\n          employeeId = 'EMP' + nextId.toString().padStart(3, '0');\n        }\n        // Verify the userId exists in accounts\n        const userId = parseInt(body.userId);\n        if (isNaN(userId)) {\n          return error('Please select a valid user');\n        }\n        const userExists = accounts.some(a => a.id === userId);\n        if (!userExists) {\n          return error('User not found');\n        }\n        // Verify the departmentId exists\n        const departmentId = parseInt(body.departmentId);\n        if (isNaN(departmentId)) {\n          return error('Please select a valid department');\n        }\n        const department = departments.find(d => d.id === departmentId);\n        if (!department) {\n          return error('Department not found');\n        }\n        // Create the employee with auto-generated ID\n        const nextId = employees.length + 1;\n        const employee = {\n          id: nextId,\n          employeeId: employeeId,\n          userId: userId,\n          departmentId: departmentId,\n          position: body.position || '',\n          hireDate: body.hireDate || new Date().toISOString().split('T')[0],\n          status: body.status || 'Active'\n        };\n        // Add to employees array\n        employees.push(employee);\n        // Update department employee count\n        department.employeeCount++;\n        // Create onboarding workflow\n        workflows.push({\n          id: workflows.length + 1,\n          employeeId: nextId,\n          type: 'Onboarding',\n          details: 'Task: Setup workstation',\n          status: 'Pending'\n        });\n        return ok(employee);\n      }\n      function getEmployeeById() {\n        const id = parseInt(path.split('/').pop());\n        const employee = employees.find(e => e.id === id);\n        if (!employee) return error('Employee not found');\n        return ok(employee);\n      }\n      function getEmployeeWithDetails() {\n        const id = parseInt(path.split('/').pop().split('/')[0]);\n        const employee = employees.find(e => e.id === id);\n        if (!employee) return error('Employee not found');\n        // Get user account details\n        const user = accounts.find(a => a.id === employee.userId);\n        // Get department details\n        const department = departments.find(d => d.id === employee.departmentId);\n        // Create a response with the related details\n        const response = Object.assign(Object.assign({}, employee), {\n          User: user ? {\n            id: user.id,\n            email: user.email,\n            role: user.role\n          } : null,\n          Department: department ? {\n            id: department.id,\n            name: department.name\n          } : null\n        });\n        return ok(response);\n      }\n      function updateEmployee() {\n        const id = parseInt(path.split('/').pop());\n        const employeeIndex = employees.findIndex(e => e.id === id);\n        if (employeeIndex === -1) return error('Employee not found');\n        // Parse values to ensure they're numbers\n        let userId = body.userId;\n        if (userId && typeof userId === 'string') {\n          userId = parseInt(userId);\n        }\n        let departmentId = body.departmentId;\n        if (departmentId && typeof departmentId === 'string') {\n          departmentId = parseInt(departmentId);\n        }\n        // Check if user exists if userId is being updated\n        if (userId) {\n          const userExists = accounts.some(a => a.id === userId);\n          if (!userExists) {\n            return error('User not found');\n          }\n        }\n        // Check if department exists if departmentId is being updated\n        if (departmentId && departmentId !== employees[employeeIndex].departmentId) {\n          const oldDepartmentId = employees[employeeIndex].departmentId;\n          const oldDepartment = departments.find(d => d.id === oldDepartmentId);\n          const newDepartment = departments.find(d => d.id === departmentId);\n          if (!newDepartment) {\n            return error('Department not found');\n          }\n          // Update department employee counts\n          if (oldDepartment) oldDepartment.employeeCount--;\n          newDepartment.employeeCount++;\n        }\n        // Keep the employeeId unchanged\n        const employeeId = employees[employeeIndex].employeeId;\n        // Create updated employee object with parsed values\n        const updatedEmployee = {\n          id,\n          employeeId,\n          userId: userId || employees[employeeIndex].userId,\n          departmentId: departmentId || employees[employeeIndex].departmentId,\n          position: body.position || employees[employeeIndex].position,\n          hireDate: body.hireDate || employees[employeeIndex].hireDate,\n          status: body.status || employees[employeeIndex].status\n        };\n        // Update the employee\n        employees[employeeIndex] = updatedEmployee;\n        return ok(updatedEmployee);\n      }\n      function transferEmployee() {\n        const id = parseInt(path.split('/')[2]);\n        const employee = employees.find(e => e.id === id);\n        if (!employee) return error('Employee not found');\n        // Get department information\n        const oldDepartmentId = employee.departmentId;\n        const newDepartmentId = body.departmentId;\n        const oldDepartment = departments.find(d => d.id === oldDepartmentId);\n        const newDepartment = departments.find(d => d.id === newDepartmentId);\n        // Update employee's department\n        employee.departmentId = newDepartmentId;\n        // Update department counts\n        if (oldDepartment) oldDepartment.employeeCount--;\n        if (newDepartment) newDepartment.employeeCount++;\n        // Create transfer workflow\n        workflows.push({\n          id: workflows.length + 1,\n          employeeId: id,\n          type: 'Department Transfer',\n          details: `Employee transferred from ${(oldDepartment === null || oldDepartment === void 0 ? void 0 : oldDepartment.name) || 'Unknown'} to ${(newDepartment === null || newDepartment === void 0 ? void 0 : newDepartment.name) || 'Unknown'}.`,\n          status: 'Pending'\n        });\n        return ok({\n          message: `Department transfer workflow created for employee ${employee.employeeId}.`\n        });\n      }\n      // Department route functions\n      function getDepartments() {\n        return ok(departments);\n      }\n      function getDepartmentById() {\n        const id = parseInt(path.split('/').pop());\n        const department = departments.find(d => d.id === id);\n        if (!department) return error('Department not found');\n        return ok(department);\n      }\n      function createDepartment() {\n        // Check if department with same name already exists\n        if (departments.some(d => d.name.toLowerCase() === body.name.toLowerCase())) {\n          return error('Department with this name already exists');\n        }\n        // Create department with initial employee count of 0\n        const department = {\n          id: departments.length + 1,\n          name: body.name,\n          description: body.description,\n          employeeCount: 0\n        };\n        departments.push(department);\n        return ok(department);\n      }\n      function updateDepartment() {\n        const id = parseInt(path.split('/').pop());\n        const deptIndex = departments.findIndex(d => d.id === id);\n        if (deptIndex === -1) return error('Department not found');\n        // Check if name is being changed and if it already exists\n        if (body.name && body.name !== departments[deptIndex].name) {\n          if (departments.some(d => d.id !== id && d.name.toLowerCase() === body.name.toLowerCase())) {\n            return error('Department with this name already exists');\n          }\n        }\n        // Update department\n        departments[deptIndex] = Object.assign(Object.assign({}, departments[deptIndex]), {\n          name: body.name || departments[deptIndex].name,\n          description: body.description || departments[deptIndex].description\n        });\n        return ok(departments[deptIndex]);\n      }\n      // Workflow route functions\n      function getEmployeeWorkflows() {\n        const employeeId = parseInt(path.split('/').pop());\n        return ok(workflows.filter(w => w.employeeId === employeeId));\n      }\n      function getAllWorkflows() {\n        return ok(workflows);\n      }\n      function createWorkflow() {\n        const workflow = Object.assign({\n          id: workflows.length + 1\n        }, body);\n        workflows.push(workflow);\n        return ok(workflow);\n      }\n      function updateWorkflow() {\n        // Handle both direct update and status update endpoints\n        let id;\n        if (path.includes('/workflows/') && path.includes('/status')) {\n          // Extract ID from paths like /workflows/123/status\n          id = parseInt(path.split('/')[2]);\n        } else {\n          // Standard path like /workflows/123\n          id = parseInt(path.split('/').pop());\n        }\n        const workflowIndex = workflows.findIndex(w => w.id === id);\n        if (workflowIndex === -1) return error('Workflow not found');\n        // Store previous status\n        const oldStatus = workflows[workflowIndex].status;\n        const oldWorkflow = Object.assign({}, workflows[workflowIndex]);\n        // Check if this is an update that includes a direct request for updating request status too\n        const updateRequestFlag = body.updateRequest === true;\n        let providedRequestId = body.requestId ? parseInt(body.requestId) : null;\n        // Create a new version of the body without the special properties\n        const workflowUpdateBody = Object.assign({}, body);\n        delete workflowUpdateBody.updateRequest;\n        delete workflowUpdateBody.requestId;\n        // Update workflow with clean data\n        workflows[workflowIndex] = Object.assign(Object.assign(Object.assign({}, workflows[workflowIndex]), workflowUpdateBody), {\n          id // preserve id\n        });\n        // If direct request flag was provided, prioritize using the provided requestId\n        if (updateRequestFlag && providedRequestId) {\n          console.log('Direct request to update request ID:', providedRequestId);\n          const requestIndex = requests.findIndex(r => r.id === providedRequestId);\n          if (requestIndex !== -1) {\n            // Update request status based on workflow status\n            requests[requestIndex].status = body.status;\n            console.log(`Updated request ${providedRequestId} status to ${body.status}`);\n          } else {\n            console.log('Request not found with ID:', providedRequestId);\n          }\n        } else {\n          // Try to extract requestId from workflow details if it's a request approval workflow\n          if (oldWorkflow.type === 'Request Approval' || oldWorkflow.type === 'RequestApproval') {\n            try {\n              const details = JSON.parse(oldWorkflow.details);\n              const requestId = details.requestId;\n              if (requestId) {\n                const requestIndex = requests.findIndex(r => r.id === requestId);\n                if (requestIndex !== -1) {\n                  // Update request status based on workflow status\n                  requests[requestIndex].status = body.status;\n                  console.log(`Updated request ${requestId} status to ${body.status}`);\n                } else {\n                  console.log('Request not found with ID:', requestId);\n                }\n              }\n            } catch (e) {\n              console.log('Error parsing workflow details:', e);\n            }\n          }\n        }\n        // Create workflow entry if status changed\n        if (body.status && body.status !== oldStatus) {\n          workflows.push({\n            id: workflows.length + 1,\n            employeeId: id,\n            type: 'Request Approval',\n            details: JSON.stringify({\n              requestId: id,\n              requestType: 'Request Approval',\n              requesterId: id,\n              message: `Request #${id} from Employee ID ${id} was ${body.status.toLowerCase()}.`\n            }),\n            status: 'Pending'\n          });\n        }\n        // Create workflow for request edits if items changed\n        else if (body.items || body.requestItems) {\n          workflows.push({\n            id: workflows.length + 1,\n            employeeId: id,\n            type: 'Request Approval',\n            details: JSON.stringify({\n              requestId: id,\n              requestType: 'Request Approval',\n              requesterId: id,\n              message: `Review updated Equipment request #${id} from Employee ID ${id}.`\n            }),\n            status: 'Pending'\n          });\n        }\n        return ok(workflows[workflowIndex]);\n      }\n      // Request route functions\n      function getRequests() {\n        // Get all requests with employee details\n        const allRequests = requests.map(request => {\n          // Find employee\n          const employee = employees.find(e => e.id === request.employeeId);\n          // Find user information if employee exists\n          let userEmail = 'Unknown';\n          let userRole = 'Unknown';\n          let user = null;\n          if (employee && employee.userId) {\n            user = accounts.find(a => a.id === employee.userId);\n            if (user) {\n              userEmail = user.email;\n              userRole = user.role;\n            }\n          }\n          // Find department information if employee exists\n          const department = (employee === null || employee === void 0 ? void 0 : employee.departmentId) ? departments.find(d => d.id === employee.departmentId) : null;\n          // Return enhanced request with employee and user info\n          // Ensure both items and requestItems properties exist for frontend compatibility\n          const enhancedRequest = Object.assign(Object.assign({}, request), {\n            Employee: employee ? Object.assign(Object.assign({}, employee), {\n              User: user ? {\n                id: user.id,\n                email: user.email,\n                role: user.role\n              } : null,\n              Department: department ? {\n                id: department.id,\n                name: department.name\n              } : null\n            }) : null,\n            userEmail,\n            userRole\n          });\n          // Ensure both items and requestItems are available\n          if (!enhancedRequest.items && enhancedRequest.requestItems) {\n            enhancedRequest.items = [...enhancedRequest.requestItems];\n          } else if (!enhancedRequest.requestItems && enhancedRequest.items) {\n            enhancedRequest.requestItems = [...enhancedRequest.items];\n          } else if (!enhancedRequest.items && !enhancedRequest.requestItems) {\n            // Initialize empty arrays for both if neither exists\n            enhancedRequest.items = [];\n            enhancedRequest.requestItems = [];\n          }\n          return enhancedRequest;\n        });\n        return ok(allRequests);\n      }\n      function getRequestById() {\n        const id = parseInt(path.split('/').pop());\n        const request = requests.find(r => r.id === id);\n        if (!request) return error('Request not found');\n        // Find employee\n        const employee = employees.find(e => e.id === request.employeeId);\n        // Find user information if employee exists\n        let userEmail = 'Unknown';\n        let userRole = 'Unknown';\n        let user = null;\n        if (employee && employee.userId) {\n          user = accounts.find(a => a.id === employee.userId);\n          if (user) {\n            userEmail = user.email;\n            userRole = user.role;\n          }\n        }\n        // Return request with user and employee info\n        const enhancedRequest = Object.assign(Object.assign({}, request), {\n          employee: employee ? {\n            id: employee.id,\n            employeeId: employee.employeeId\n          } : null,\n          Employee: employee ? Object.assign(Object.assign({}, employee), {\n            User: user ? {\n              id: user.id,\n              email: user.email,\n              role: user.role\n            } : null\n          }) : null,\n          userEmail,\n          userRole\n        });\n        // Ensure both items and requestItems are available\n        if (!enhancedRequest.items && enhancedRequest.requestItems) {\n          enhancedRequest.items = [...enhancedRequest.requestItems];\n        } else if (!enhancedRequest.requestItems && enhancedRequest.items) {\n          enhancedRequest.requestItems = [...enhancedRequest.items];\n        } else if (!enhancedRequest.items && !enhancedRequest.requestItems) {\n          // Initialize empty arrays for both if neither exists\n          enhancedRequest.items = [];\n          enhancedRequest.requestItems = [];\n        }\n        return ok(enhancedRequest);\n      }\n      function getRequestsByEmployeeId() {\n        const employeeIdParam = new URL(url).searchParams.get('employeeId');\n        if (!employeeIdParam) return error('Employee ID is required');\n        const employeeId = parseInt(employeeIdParam);\n        if (isNaN(employeeId)) return error('Invalid employee ID');\n        // Check if employee exists\n        const employee = employees.find(e => e.id === employeeId);\n        if (!employee) return error('Employee not found');\n        // Get user information\n        const user = accounts.find(a => a.id === employee.userId);\n        let userEmail = 'Unknown';\n        let userRole = 'Unknown';\n        if (user) {\n          userEmail = user.email;\n          userRole = user.role;\n        }\n        // Get department information\n        const department = departments.find(d => d.id === employee.departmentId);\n        // Filter requests by employee ID\n        const filteredRequests = requests.filter(r => r.employeeId === employeeId).map(request => {\n          const enhancedRequest = Object.assign(Object.assign({}, request), {\n            Employee: Object.assign(Object.assign({}, employee), {\n              User: user ? {\n                id: user.id,\n                email: user.email,\n                role: user.role\n              } : null,\n              Department: department ? {\n                id: department.id,\n                name: department.name\n              } : null\n            }),\n            userEmail,\n            userRole\n          });\n          // Ensure both items and requestItems are available\n          if (!enhancedRequest.items && enhancedRequest.requestItems) {\n            enhancedRequest.items = [...enhancedRequest.requestItems];\n          } else if (!enhancedRequest.requestItems && enhancedRequest.items) {\n            enhancedRequest.requestItems = [...enhancedRequest.items];\n          } else if (!enhancedRequest.items && !enhancedRequest.requestItems) {\n            // Initialize empty arrays for both if neither exists\n            enhancedRequest.items = [];\n            enhancedRequest.requestItems = [];\n          }\n          return enhancedRequest;\n        });\n        return ok(filteredRequests);\n      }\n      function createRequest() {\n        const account = currentAccount();\n        if (!account) return unauthorized();\n        // Use employeeId from body if provided (for admin users)\n        // Otherwise, find employee associated with current user\n        let employeeId;\n        if (body.employeeId && account.role === Role.Admin) {\n          // Admin users can create requests for any employee\n          employeeId = parseInt(body.employeeId);\n          // Verify that the employee exists\n          const employeeExists = employees.some(e => e.id === employeeId);\n          if (!employeeExists) {\n            return error('Selected employee not found');\n          }\n        } else {\n          // Regular users can only create requests for themselves\n          const employee = employees.find(e => e.userId === account.id);\n          if (!employee) {\n            return error('No employee record found for current user');\n          }\n          employeeId = employee.id;\n        }\n        // Find employee record for the request\n        const employee = employees.find(e => e.id === employeeId);\n        // Process items from either items or requestItems property\n        const requestItems = [];\n        if (body.items && Array.isArray(body.items)) {\n          body.items.forEach(item => {\n            requestItems.push({\n              name: item.name,\n              quantity: item.quantity || 1\n            });\n          });\n        } else if (body.requestItems && Array.isArray(body.requestItems)) {\n          body.requestItems.forEach(item => {\n            requestItems.push({\n              name: item.name,\n              quantity: item.quantity || 1\n            });\n          });\n        }\n        // Create request with proper structure\n        const request = {\n          id: requests.length + 1,\n          employeeId: employeeId,\n          type: body.type || 'Equipment',\n          status: 'Pending',\n          items: [...requestItems],\n          requestItems: [...requestItems] // For newer frontend implementations\n        };\n\n        console.log('Creating new request:', request);\n        requests.push(request);\n        // Create workflow entry for request approval\n        workflows.push({\n          id: workflows.length + 1,\n          employeeId: employeeId,\n          type: 'Request Approval',\n          details: JSON.stringify({\n            requestId: request.id,\n            requestType: request.type,\n            requesterId: employeeId,\n            message: `Review ${request.type} request #${request.id} from Employee ID ${employee.employeeId}.`\n          }),\n          status: 'Pending'\n        });\n        return ok(request);\n      }\n      function updateRequest() {\n        const id = parseInt(path.split('/').pop());\n        const reqIndex = requests.findIndex(r => r.id === id);\n        if (reqIndex === -1) return error('Request not found');\n        // Log incoming request update\n        console.log('Updating request:', id, 'with data:', body);\n        // Preserve the employeeId\n        const employeeId = requests[reqIndex].employeeId;\n        const oldStatus = requests[reqIndex].status;\n        // Process items from either items or requestItems property\n        const requestItems = [];\n        if (body.items && Array.isArray(body.items)) {\n          body.items.forEach(item => {\n            requestItems.push({\n              name: item.name,\n              quantity: item.quantity || 1\n            });\n          });\n        } else if (body.requestItems && Array.isArray(body.requestItems)) {\n          body.requestItems.forEach(item => {\n            requestItems.push({\n              name: item.name,\n              quantity: item.quantity || 1\n            });\n          });\n        } else {\n          // If no items provided, keep existing ones\n          requestItems.push(...(requests[reqIndex].requestItems || []));\n        }\n        // Update the request - prioritize any provided fields or keep the existing values\n        requests[reqIndex] = {\n          id,\n          employeeId,\n          type: body.type || requests[reqIndex].type,\n          status: body.status === 'Completed' ? 'Pending' : body.status || requests[reqIndex].status,\n          items: [...requestItems],\n          requestItems: [...requestItems] // For newer frontend implementations\n        };\n\n        console.log('Request updated:', requests[reqIndex]);\n        // Find employee info for the workflow\n        const employee = employees.find(e => e.id === employeeId);\n        if (!employee) return error('Employee not found');\n        // Create workflow entry if status changed or items changed\n        if (body.status && body.status !== oldStatus || body.items || body.requestItems) {\n          const requestType = body.type || requests[reqIndex].type;\n          const workflowMessage = `Review updated ${requestType} request #${id} from Employee ID ${employee.employeeId}.`;\n          workflows.push({\n            id: workflows.length + 1,\n            employeeId: employeeId,\n            type: 'Request Approval',\n            details: JSON.stringify({\n              requestId: id,\n              requestType: requestType,\n              requesterId: employeeId,\n              message: workflowMessage\n            }),\n            status: 'Pending'\n          });\n        }\n        return ok(requests[reqIndex]);\n      }\n      function getNextEmployeeId() {\n        console.log('Fake backend: Getting next employee ID');\n        // Find the highest employee ID number\n        let maxId = 0;\n        employees.forEach(emp => {\n          if (emp.employeeId && emp.employeeId.startsWith('EMP')) {\n            const idNum = parseInt(emp.employeeId.substring(3));\n            if (!isNaN(idNum) && idNum > maxId) {\n              maxId = idNum;\n            }\n          }\n        });\n        // Generate the next ID (current max + 1)\n        const nextId = maxId + 1;\n        const nextEmployeeId = 'EMP' + nextId.toString().padStart(3, '0');\n        console.log('Fake backend generated next employee ID:', nextEmployeeId);\n        return ok({\n          employeeId: nextEmployeeId\n        });\n      }\n      // Helper functions\n      function ok(body) {\n        return of(new HttpResponse({\n          status: 200,\n          body\n        }));\n      }\n      function error(message) {\n        return throwError(() => ({\n          error: {\n            message\n          }\n        }));\n      }\n      function unauthorized() {\n        return throwError(() => ({\n          status: 401,\n          error: {\n            message: 'Unauthorized'\n          }\n        }));\n      }\n      function forbidden() {\n        return throwError(() => ({\n          status: 403,\n          error: {\n            message: 'Forbidden'\n          }\n        }));\n      }\n      function basicDetails(account) {\n        const {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          dateCreated,\n          isVerified,\n          status\n        } = account;\n        return {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          dateCreated,\n          isVerified,\n          status\n        };\n      }\n      function isAuthenticated() {\n        return !!currentAccount();\n      }\n      function isAuthorized(role) {\n        const account = currentAccount();\n        if (!account) return false;\n        return account.role === role;\n      }\n      function idFromUrl() {\n        const urlParts = path.split('/');\n        return parseInt(urlParts[urlParts.length - 1]);\n      }\n      function newAccountId() {\n        return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\n      }\n      function currentAccount() {\n        // check if jwt token is in auth header\n        const authHeader = headers.get('Authorization');\n        if (!authHeader || !authHeader.startsWith('Bearer fake-jwt-token')) return;\n        // check if token is expired\n        const jwtToken = JSON.parse(atob(authHeader.split('.')[1]));\n        const tokenExpired = Date.now() > jwtToken.exp * 1000;\n        if (tokenExpired) return;\n        const account = accounts.find(x => x.id === jwtToken.id);\n        return account;\n      }\n      function generateJwtToken(account) {\n        // create token that expires in 15 minutes\n        const tokenPayload = {\n          exp: Math.round(new Date(Date.now() + 15 * 60 * 1000).getTime() / 1000),\n          id: account.id\n        };\n        return `fake-jwt-token.${btoa(JSON.stringify(tokenPayload))}`;\n      }\n      function generateRefreshToken() {\n        const token = new Date().getTime().toString();\n        // add token cookie that expires in 7 days\n        const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toUTCString();\n        document.cookie = `fakeRefreshToken=${token}; expires=${expires}; path=/`;\n        return token;\n      }\n      function getRefreshToken() {\n        // get refresh token from cookie\n        return (document.cookie.split(';').find(x => x.includes('fakeRefreshToken')) || '=').split('=')[1];\n      }\n      function authorize(requiredRole, success) {\n        if (!isAuthenticated()) return unauthorized();\n        if (requiredRole && !isAuthorized(requiredRole)) return forbidden();\n        return success();\n      }\n    }\n  }\n  FakeBackendInterceptor.ɵfac = function FakeBackendInterceptor_Factory(t) {\n    return new (t || FakeBackendInterceptor)(i0.ɵɵinject(i1.AlertService));\n  };\n  FakeBackendInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FakeBackendInterceptor,\n    factory: FakeBackendInterceptor.ɵfac\n  });\n  return FakeBackendInterceptor;\n})();\nexport const fakeBackendProvider = {\n  provide: HTTP_INTERCEPTORS,\n  useClass: FakeBackendInterceptor,\n  multi: true\n};","map":{"version":3,"mappings":"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","names":["HttpResponse","HTTP_INTERCEPTORS","of","throwError","delay","mergeMap","materialize","dematerialize","Role","environment","accountsKey","accounts","JSON","parse","localStorage","getItem","employees","id","employeeId","userId","position","departmentId","hireDate","status","departments","name","description","employeeCount","workflows","type","details","requests","requestItems","quantity","FakeBackendInterceptor","constructor","alertService","intercept","request","next","url","method","headers","body","apiUrl","path","startsWith","substring","length","pipe","handleRoute","endsWith","authenticate","refreshToken","revokeToken","register","verifyEmail","forgotPassword","validateResetToken","resetPassword","getAccounts","getActiveAccounts","match","getAccountById","createAccount","updateAccount","authorize","getEmployees","getNextEmployeeId","Admin","createEmployee","getEmployeeById","getEmployeeWithDetails","updateEmployee","transferEmployee","getDepartments","createDepartment","getDepartmentById","updateDepartment","getEmployeeWorkflows","getAllWorkflows","createWorkflow","updateWorkflow","getRequests","getRequestsByEmployeeId","getRequestById","createRequest","updateRequest","handle","email","password","account","find","x","error","isVerified","setTimeout","verifyUrl","location","origin","verificationToken","info","autoClose","refreshTokens","push","generateRefreshToken","setItem","stringify","ok","basicDetails","jwtToken","generateJwtToken","getRefreshToken","unauthorized","includes","filter","isAuthenticated","autoclose","newAccountId","role","confirmPassword","priority","timeout","message","User","dateCreated","Date","toISOString","getTime","toString","token","resetToken","resetTokenExpires","now","resetUrl","map","idFromUrl","currentAccount","isAuthorized","params","Object","assign","enrichedEmployees","employee","user","a","department","d","firstName","lastName","Department","trim","nextId","padStart","parseInt","isNaN","userExists","some","split","pop","e","response","employeeIndex","findIndex","oldDepartmentId","oldDepartment","newDepartment","updatedEmployee","newDepartmentId","toLowerCase","deptIndex","w","workflow","workflowIndex","oldStatus","oldWorkflow","updateRequestFlag","providedRequestId","requestId","workflowUpdateBody","console","log","requestIndex","r","requestType","requesterId","items","allRequests","userEmail","userRole","enhancedRequest","Employee","employeeIdParam","URL","searchParams","get","filteredRequests","employeeExists","Array","isArray","forEach","item","reqIndex","workflowMessage","maxId","emp","idNum","nextEmployeeId","forbidden","title","urlParts","Math","max","authHeader","atob","tokenExpired","exp","tokenPayload","round","btoa","expires","toUTCString","document","cookie","requiredRole","success","factory","fakeBackendProvider","provide","useClass","multi"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\Restful-API-User-Management-System\\frontend\\src\\app\\_helpers\\fake-backend.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS, HttpHeaders } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { delay, mergeMap, materialize, dematerialize } from 'rxjs/operators';\n\nimport { AlertService } from '@app/_services';\nimport { Role } from '@app/_models';\nimport { environment } from '@environments/environment';\n\n// array in local storage for accounts\nconst accountsKey = 'angular-10-registration-login-example-accounts';\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n\n// in-memory data\nlet employees = [\n    { id: 1, employeeId: 'EMP001', userId: 1, position: 'Developer', departmentId: 1, hireDate: '2025-01-01', status: 'Active' },\n    { id: 2, employeeId: 'EMP002', userId: 2, position: 'Designer', departmentId: 2, hireDate: '2025-02-01', status: 'Active' }\n];\n\nlet departments = [\n    { id: 1, name: 'Engineering', description: 'Software development team', employeeCount: 1 },\n    { id: 2, name: 'Marketing', description: 'Marketing team', employeeCount: 1 }\n];\n\nlet workflows = [\n    { id: 1, employeeId: 1, type: 'Onboarding', details: 'Task: Setup workstation', status: 'Pending' }\n];\n\nlet requests = [\n    { id: 1, employeeId: 1, type: 'Equipment', requestItems: [{ name: 'Laptop', quantity: 1 }, { name: 'Monitor', quantity: 2 }], status: 'Pending' },\n    { id: 2, employeeId: 1, type: 'Resources', requestItems: [{ name: 'Visual Studio', quantity: 1 }, { name: 'Office 365', quantity: 1 }], status: 'Approved' },\n    { id: 3, employeeId: 2, type: 'Resources', requestItems: [{ name: 'Adobe Illustrator Course', quantity: 1 }], status: 'Rejected' },\n    { id: 4, employeeId: 2, type: 'Equipment', requestItems: [{ name: 'Drawing Tablet', quantity: 1 }], status: 'Pending' }\n];\n\n@Injectable()\nexport class FakeBackendInterceptor implements HttpInterceptor {\n    constructor(private alertService: AlertService) { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        const { url, method, headers, body } = request;\n        const alertService = this.alertService;\n\n        // Extract the path from the URL (remove the API prefix if present)\n        const apiUrl = environment.apiUrl;\n        const path = url.startsWith(apiUrl) ? url.substring(apiUrl.length) : url;\n\n        return of(null)\n            .pipe(mergeMap(() => handleRoute()))\n            .pipe(materialize())\n            .pipe(delay(500))\n            .pipe(dematerialize());\n\n        function handleRoute() {\n            switch (true) {\n                // Account endpoints\n                case path.endsWith('/accounts/authenticate') && method === 'POST':\n                    return authenticate();\n                case path.endsWith('/accounts/refresh-token') && method === 'POST':\n                    return refreshToken();\n                case path.endsWith('/accounts/revoke-token') && method === 'POST':\n                    return revokeToken();\n                case path.endsWith('/accounts/register') && method === 'POST':\n                    return register();\n                case path.endsWith('/accounts/verify-email') && method === 'POST':\n                    return verifyEmail();\n                case path.endsWith('/accounts/forgot-password') && method === 'POST':\n                    return forgotPassword();\n                case path.endsWith('/accounts/validate-reset-token') && method === 'POST':\n                    return validateResetToken();\n                case path.endsWith('/accounts/reset-password') && method === 'POST':\n                    return resetPassword();\n                case path.endsWith('/accounts') && method === 'GET':\n                    return getAccounts();\n                case path.endsWith('/accounts/active') && method === 'GET':\n                    return getActiveAccounts();\n                case path.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n                    return getAccountById();\n                case path.endsWith('/accounts') && method === 'POST':\n                    return createAccount();\n                case path.match(/\\/accounts\\/\\d+$/) && method === 'PUT':\n                    return updateAccount();\n                \n                // Employee endpoints\n                case path.endsWith('/employees') && method === 'GET':\n                    return authorize(null, () => getEmployees());\n                case path.endsWith('/employees/nextId') && method === 'GET':\n                    return authorize(null, () => getNextEmployeeId());\n                case path.endsWith('/employees') && method === 'POST':\n                    return authorize(Role.Admin, () => createEmployee());\n                case path.match(/\\/employees\\/\\d+$/) && method === 'GET':\n                    return authorize(null, () => getEmployeeById());\n                case path.match(/\\/employees\\/\\d+\\/with-details$/) && method === 'GET':\n                    return authorize(null, () => getEmployeeWithDetails());\n                case path.match(/\\/employees\\/\\d+$/) && method === 'PUT':\n                    return authorize(Role.Admin, () => updateEmployee());\n                case path.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'POST':\n                    return authorize(Role.Admin, () => transferEmployee());\n                \n                // Department endpoints\n                case path.endsWith('/departments') && method === 'GET':\n                    return authorize(null, () => getDepartments());\n                case path.endsWith('/departments') && method === 'POST':\n                    return authorize(Role.Admin, () => createDepartment());\n                case path.match(/\\/departments\\/\\d+$/) && method === 'GET':\n                    return authorize(null, () => getDepartmentById());\n                case path.match(/\\/departments\\/\\d+$/) && method === 'PUT':\n                    return authorize(Role.Admin, () => updateDepartment());\n                \n                // Workflow endpoints\n                case path.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET':\n                    return authorize(null, () => getEmployeeWorkflows());\n                case path.endsWith('/workflows') && method === 'GET':\n                    return authorize(null, () => getAllWorkflows());\n                case path.endsWith('/workflows') && method === 'POST':\n                    return authorize(Role.Admin, () => createWorkflow());\n                case path.match(/\\/workflows\\/\\d+\\/status$/) && method === 'PUT':\n                    return authorize(Role.Admin, () => updateWorkflow());\n                case path.match(/\\/workflows\\/\\d+$/) && method === 'PUT':\n                    return authorize(Role.Admin, () => updateWorkflow());\n                \n                // Request endpoints\n                case path.endsWith('/requests') && method === 'GET':\n                    return authorize(null, () => getRequests());\n                case path.match(/\\/requests\\?employeeId=\\d+$/) && method === 'GET':\n                    return authorize(null, () => getRequestsByEmployeeId());\n                case path.match(/\\/requests\\/\\d+$/) && method === 'GET':\n                    return authorize(null, () => getRequestById());\n                case path.endsWith('/requests') && method === 'POST':\n                    return authorize(null, () => createRequest());\n                case path.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n                    return authorize(Role.Admin, () => updateRequest());\n                \n                default:\n                    // pass through any requests not handled above\n                    return next.handle(request);\n            }\n        }\n\n        // Account route functions\n        function authenticate() {\n            const { email, password } = body;\n            const account = accounts.find(x => x.email === email);\n        \n            if (!account) {\n                return error('Email does not exist');\n            }\n        \n            if (!account.isVerified) {\n                // Display verification email alert\n                setTimeout(() => {\n                    const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n                    alertService.info(`\n                        <h4>Verification Email</h4>\n                        <p>Please click the below link to verify your email address:</p>\n                        <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    `, { autoClose: false });\n                }, 1000);\n        \n                return error('Email is not yet verified');\n            }\n        \n            if (account.password !== password) {\n                return error('Incorrect password');\n            }\n        \n            if (account.status !== 'Active') {\n                return error('Account is inactive. Please contact system administrator.');\n            }\n        \n            account.refreshTokens.push(generateRefreshToken());\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        \n            return ok({\n                ...basicDetails(account),\n                jwtToken: generateJwtToken(account)\n            });\n        }\n\n        function refreshToken() {\n            const refreshToken = getRefreshToken();\n\n            if (!refreshToken) return unauthorized();\n\n            const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n\n            if (!account) return unauthorized();\n\n            // replace old refresh token with a new one and save\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n            account.refreshTokens.push(generateRefreshToken());\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok({\n                ...basicDetails(account),\n                jwtToken: generateJwtToken(account)\n            });\n        }\n\n        function revokeToken() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const refreshToken = getRefreshToken();\n            const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n\n            // revoke token and save\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function register() {\n            const account = body;\n\n            if (accounts.find(x => x.email === account.email)) {\n                // display email already registered message in alert\n                setTimeout(() => {\n                    alertService.info(`\n                        <h4>Email Already Registered</h4>\n                        <p>Your email ${account.email} is already registered.</p>\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                        <div>\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\n                        </div>\n                    `, { autoclose: false });\n                }, 1000);\n\n                // always return ok() response to prevent email enumeration\n                return ok();\n            }\n\n            // assign account id and a few other properties then save\n            account.id = newAccountId();\n            \n            if (account.id === 1) {\n                // First registered account is an admin and active\n                account.role = Role.Admin;\n                account.status = 'Active'; // Admin accounts get active status\n                account.isVerified = true; // First account is automatically verified\n                \n                // Save account without verification token\n                account.refreshTokens = [];\n                delete account.confirmPassword;\n                accounts.push(account);\n                localStorage.setItem(accountsKey, JSON.stringify(accounts));\n                \n                // Slight delay for the info message so the success message appears first\n                setTimeout(() => {\n                    alertService.info(`\n                        <h4>First User Login</h4>\n                        <p>You can login directly as first user where role is Admin and account is verified</p>\n                        <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                    `, { \n                        autoClose: true,\n                        priority: 5,\n                        timeout: 5000\n                    });\n                }, 200);\n                \n                return ok({ message: 'Admin registration successful. You can login directly.' });\n            } else {\n                // Regular user accounts\n                account.role = Role.User;\n                account.status = 'Inactive'; // User accounts get inactive status upon creation\n                account.dateCreated = new Date().toISOString();\n                account.verificationToken = new Date().getTime().toString();\n                account.isVerified = false;\n                account.refreshTokens = [];\n                delete account.confirmPassword;\n                accounts.push(account);\n                localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n                // display verification email in alert\n                setTimeout(() => {\n                    const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n                    alertService.info(`\n                        <h4>Verification Email</h4>\n                        <p>Thanks for registering!</p>\n                        <p>Please click the below link to verify your email address:</p>\n                        <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                        <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                    `, { autoclose: false });\n                }, 1000);\n\n                return ok({ message: 'Registration successful, please check your email for verification instructions' });\n            }\n        }\n\n        function verifyEmail() {\n            const { token } = body;\n            const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n\n            if (!account) return error('Verification failed');\n\n            // set is verified flag to true if token is valid\n            account.isVerified = true;\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function forgotPassword() {\n            const { email } = body;\n            const account = accounts.find(x => x.email === email);\n\n            // always return ok() response to prevent email enumeration\n            if (!account) return ok();\n\n            // create reset token that expires after 24 hours\n            account.resetToken = new Date().getTime().toString();\n            account.resetTokenExpires = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString();\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            // display password reset email in alert\n            setTimeout(() => {\n                const resetUrl = `${location.origin}/account/reset-password?token=${account.resetToken}`;\n                alertService.info(`\n                    <h4>Reset Password Email</h4>\n                    <p>Please click the below link to reset your password, the link will be valid for 1 day:</p>\n                    <p><a href=\"${resetUrl}\">${resetUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, { autoClose: false });\n            }, 1000);\n\n            return ok();\n        }\n\n        function validateResetToken() {\n            const { token } = body;\n            const account = accounts.find(x =>\n                !!x.resetToken &&\n                x.resetToken === token &&\n                new Date() < new Date(x.resetTokenExpires)\n            );\n\n            if (!account) return error(\"Invalid token\");\n\n            return ok();\n        }\n\n        function resetPassword() {\n            const { token, password } = body;\n            const account = accounts.find(x =>\n                !!x.resetToken && x.resetToken === token &&\n                new Date() < new Date(x.resetTokenExpires)\n            );\n\n            if (!account) return error('Invalid token');\n\n            // update password and remove reset token\n            account.password = password;\n            account.isVerified = true;\n            delete account.resetToken;\n            delete account.resetTokenExpires;\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function getAccounts() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(accounts.map(x => basicDetails(x)));\n        }\n\n        // New function to get only active accounts for employee creation\n        function getActiveAccounts() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(accounts\n                .filter(x => x.status === 'Active')\n                .map(x => basicDetails(x)));\n        }\n\n        function getAccountById() {\n            if (!isAuthenticated()) return unauthorized();\n\n            let account = accounts.find(x => x.id === idFromUrl());\n\n            // user accounts can get own profile and admin accounts can get all profiles\n            if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {\n                return unauthorized();\n            }\n\n            return ok(basicDetails(account));\n        }\n\n        function createAccount() {\n            if (!isAuthorized(Role.Admin)) return unauthorized();\n\n            const account = body;\n            if (accounts.find(x => x.email === account.email)) {\n                return error(`Email ${account.email} is already registered`);\n            }\n\n            // assign account id and a few other properties then save\n            account.id = newAccountId();\n            account.status = 'Inactive';\n            account.dateCreated = new Date().toISOString();\n            account.isVerified = true;\n            account.refreshTokens = [];\n            delete account.confirmPassword;\n            accounts.push(account);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function updateAccount() {\n            if (!isAuthenticated()) return unauthorized();\n\n            let params = body;\n            let account = accounts.find(x => x.id == idFromUrl());\n\n            // Check if account exists\n            if (!account) {\n                return error('Account not found');\n            }\n\n            // user accounts can update own profile and admin accounts can update all profiles\n            if (account.id != currentAccount().id && !isAuthorized(Role.Admin)) {\n                return unauthorized();\n            }\n\n            // only update password if included\n            if (!params.password) {\n                delete params.password;\n            }\n\n            // update and save account\n            Object.assign(account, params);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok(basicDetails(account));\n        }\n\n        // Employee route functions\n        function getEmployees() {\n            // Map employees with account and department information\n            const enrichedEmployees = employees.map(employee => {                // Get user account details\n                const user = accounts.find(a => a.id === employee.userId);\n                \n                // Get department details\n                const department = departments.find(d => d.id === employee.departmentId);\n                \n                // Create a response with the related details\n                return {\n                    ...employee,\n                    User: user ? {\n                        id: user.id,\n                        email: user.email,\n                        role: user.role,\n                        firstName: user.firstName,\n                        lastName: user.lastName\n                    } : null,\n                    Department: department ? {\n                        id: department.id,\n                        name: department.name\n                    } : null\n                };\n            });\n            \n            return ok(enrichedEmployees);\n        }\n\n        function createEmployee() {\n            // Generate employee ID in format 'EMP' + padded number if not provided\n            let employeeId = body.employeeId;\n            if (!employeeId || !employeeId.trim()) {\n                const nextId = employees.length + 1;\n                employeeId = 'EMP' + nextId.toString().padStart(3, '0');\n            }\n            \n            // Verify the userId exists in accounts\n            const userId = parseInt(body.userId);\n            if (isNaN(userId)) {\n                return error('Please select a valid user');\n            }\n            \n            const userExists = accounts.some(a => a.id === userId);\n            if (!userExists) {\n                return error('User not found');\n            }\n            \n            // Verify the departmentId exists\n            const departmentId = parseInt(body.departmentId);\n            if (isNaN(departmentId)) {\n                return error('Please select a valid department');\n            }\n            \n            const department = departments.find(d => d.id === departmentId);\n            if (!department) {\n                return error('Department not found');\n            }\n            \n            // Create the employee with auto-generated ID\n            const nextId = employees.length + 1;\n            const employee = { \n                id: nextId, \n                employeeId: employeeId, \n                userId: userId,\n                departmentId: departmentId,\n                position: body.position || '',\n                hireDate: body.hireDate || new Date().toISOString().split('T')[0],\n                status: body.status || 'Active'\n            };\n            \n            // Add to employees array\n            employees.push(employee);\n            \n            // Update department employee count\n            department.employeeCount++;\n            \n            // Create onboarding workflow\n            workflows.push({\n                id: workflows.length + 1,\n                employeeId: nextId,\n                type: 'Onboarding',\n                details: 'Task: Setup workstation',\n                status: 'Pending'\n            });\n            \n            return ok(employee);\n        }\n\n        function getEmployeeById() {\n            const id = parseInt(path.split('/').pop()!);\n            const employee = employees.find(e => e.id === id);\n            if (!employee) return error('Employee not found');\n            return ok(employee);\n        }\n        \n        function getEmployeeWithDetails() {\n            const id = parseInt(path.split('/').pop().split('/')[0]);\n            const employee = employees.find(e => e.id === id);\n            \n            if (!employee) return error('Employee not found');\n            \n            // Get user account details\n            const user = accounts.find(a => a.id === employee.userId);\n            \n            // Get department details\n            const department = departments.find(d => d.id === employee.departmentId);\n            \n            // Create a response with the related details\n            const response = {\n                ...employee,\n                User: user ? {\n                    id: user.id,\n                    email: user.email,\n                    role: user.role\n                } : null,\n                Department: department ? {\n                    id: department.id,\n                    name: department.name\n                } : null\n            };\n            \n            return ok(response);\n        }\n\n        function updateEmployee() {\n            const id = parseInt(path.split('/').pop()!);\n            const employeeIndex = employees.findIndex(e => e.id === id);\n            \n            if (employeeIndex === -1) return error('Employee not found');\n            \n            // Parse values to ensure they're numbers\n            let userId = body.userId;\n            if (userId && typeof userId === 'string') {\n                userId = parseInt(userId);\n            }\n            \n            let departmentId = body.departmentId;\n            if (departmentId && typeof departmentId === 'string') {\n                departmentId = parseInt(departmentId);\n            }\n            \n            // Check if user exists if userId is being updated\n            if (userId) {\n                const userExists = accounts.some(a => a.id === userId);\n                if (!userExists) {\n                    return error('User not found');\n                }\n            }\n            \n            // Check if department exists if departmentId is being updated\n            if (departmentId && departmentId !== employees[employeeIndex].departmentId) {\n                const oldDepartmentId = employees[employeeIndex].departmentId;\n                \n                const oldDepartment = departments.find(d => d.id === oldDepartmentId);\n                const newDepartment = departments.find(d => d.id === departmentId);\n                \n                if (!newDepartment) {\n                    return error('Department not found');\n                }\n                \n                // Update department employee counts\n                if (oldDepartment) oldDepartment.employeeCount--;\n                newDepartment.employeeCount++;\n            }\n            \n            // Keep the employeeId unchanged\n            const employeeId = employees[employeeIndex].employeeId;\n            \n            // Create updated employee object with parsed values\n            const updatedEmployee = {\n                id,\n                employeeId,\n                userId: userId || employees[employeeIndex].userId,\n                departmentId: departmentId || employees[employeeIndex].departmentId,\n                position: body.position || employees[employeeIndex].position,\n                hireDate: body.hireDate || employees[employeeIndex].hireDate,\n                status: body.status || employees[employeeIndex].status\n            };\n            \n            // Update the employee\n            employees[employeeIndex] = updatedEmployee;\n            \n            return ok(updatedEmployee);\n        }\n\n        function transferEmployee() {\n            const id = parseInt(path.split('/')[2]);\n            const employee = employees.find(e => e.id === id);\n            if (!employee) return error('Employee not found');\n            \n            // Get department information\n            const oldDepartmentId = employee.departmentId;\n            const newDepartmentId = body.departmentId;\n            const oldDepartment = departments.find(d => d.id === oldDepartmentId);\n            const newDepartment = departments.find(d => d.id === newDepartmentId);\n            \n            // Update employee's department\n            employee.departmentId = newDepartmentId;\n            \n            // Update department counts\n            if (oldDepartment) oldDepartment.employeeCount--;\n            if (newDepartment) newDepartment.employeeCount++;\n            \n            // Create transfer workflow\n            workflows.push({\n                id: workflows.length + 1,\n                employeeId: id,\n                type: 'Department Transfer',\n                details: `Employee transferred from ${oldDepartment?.name || 'Unknown'} to ${newDepartment?.name || 'Unknown'}.`,\n                status: 'Pending'\n            });\n            \n            return ok({ message: `Department transfer workflow created for employee ${employee.employeeId}.` });\n        }\n\n        // Department route functions\n        function getDepartments() {\n            return ok(departments);\n        }\n\n        function getDepartmentById() {\n            const id = parseInt(path.split('/').pop()!);\n            const department = departments.find(d => d.id === id);\n            \n            if (!department) return error('Department not found');\n            \n            return ok(department);\n        }\n\n        function createDepartment() {\n            // Check if department with same name already exists\n            if (departments.some(d => d.name.toLowerCase() === body.name.toLowerCase())) {\n                return error('Department with this name already exists');\n            }\n            \n            // Create department with initial employee count of 0\n            const department = { \n                id: departments.length + 1, \n                name: body.name,\n                description: body.description,\n                employeeCount: 0 \n            };\n            \n            departments.push(department);\n            return ok(department);\n        }\n\n        function updateDepartment() {\n            const id = parseInt(path.split('/').pop()!);\n            const deptIndex = departments.findIndex(d => d.id === id);\n            \n            if (deptIndex === -1) return error('Department not found');\n            \n            // Check if name is being changed and if it already exists\n            if (body.name && body.name !== departments[deptIndex].name) {\n                if (departments.some(d => d.id !== id && d.name.toLowerCase() === body.name.toLowerCase())) {\n                    return error('Department with this name already exists');\n                }\n            }\n            \n            // Update department\n            departments[deptIndex] = {\n                ...departments[deptIndex],\n                name: body.name || departments[deptIndex].name,\n                description: body.description || departments[deptIndex].description\n            };\n            \n            return ok(departments[deptIndex]);\n        }\n\n        // Workflow route functions\n        function getEmployeeWorkflows() {\n            const employeeId = parseInt(path.split('/').pop()!);\n            return ok(workflows.filter(w => w.employeeId === employeeId));\n        }\n\n        function getAllWorkflows() {\n            return ok(workflows);\n        }\n\n        function createWorkflow() {\n            const workflow = { id: workflows.length + 1, ...body };\n            workflows.push(workflow);\n            return ok(workflow);\n        }\n\n        function updateWorkflow() {\n            // Handle both direct update and status update endpoints\n            let id;\n            if (path.includes('/workflows/') && path.includes('/status')) {\n                // Extract ID from paths like /workflows/123/status\n                id = parseInt(path.split('/')[2]);\n            } else {\n                // Standard path like /workflows/123\n                id = parseInt(path.split('/').pop()!);\n            }\n            \n            const workflowIndex = workflows.findIndex(w => w.id === id);\n            \n            if (workflowIndex === -1) return error('Workflow not found');\n            \n            // Store previous status\n            const oldStatus = workflows[workflowIndex].status;\n            const oldWorkflow = { ...workflows[workflowIndex] };\n            \n            // Check if this is an update that includes a direct request for updating request status too\n            const updateRequestFlag = body.updateRequest === true;\n            let providedRequestId = body.requestId ? parseInt(body.requestId) : null;\n            \n            // Create a new version of the body without the special properties\n            const workflowUpdateBody: any = {...body};\n            delete workflowUpdateBody.updateRequest;\n            delete workflowUpdateBody.requestId;\n            \n            // Update workflow with clean data\n            workflows[workflowIndex] = {\n                ...workflows[workflowIndex],\n                ...workflowUpdateBody,\n                id // preserve id\n            };\n            \n            // If direct request flag was provided, prioritize using the provided requestId\n            if (updateRequestFlag && providedRequestId) {\n                console.log('Direct request to update request ID:', providedRequestId);\n                const requestIndex = requests.findIndex(r => r.id === providedRequestId);\n                \n                if (requestIndex !== -1) {\n                    // Update request status based on workflow status\n                    requests[requestIndex].status = body.status;\n                    console.log(`Updated request ${providedRequestId} status to ${body.status}`);\n                } else {\n                    console.log('Request not found with ID:', providedRequestId);\n                }\n            } else {\n                // Try to extract requestId from workflow details if it's a request approval workflow\n                if (oldWorkflow.type === 'Request Approval' || oldWorkflow.type === 'RequestApproval') {\n                    try {\n                        const details = JSON.parse(oldWorkflow.details);\n                        const requestId = details.requestId;\n                        \n                        if (requestId) {\n                            const requestIndex = requests.findIndex(r => r.id === requestId);\n                            \n                            if (requestIndex !== -1) {\n                                // Update request status based on workflow status\n                                requests[requestIndex].status = body.status;\n                                console.log(`Updated request ${requestId} status to ${body.status}`);\n                            } else {\n                                console.log('Request not found with ID:', requestId);\n                            }\n                        }\n                    } catch (e) {\n                        console.log('Error parsing workflow details:', e);\n                    }\n                }\n            }\n            \n            // Create workflow entry if status changed\n            if (body.status && body.status !== oldStatus) {\n                workflows.push({\n                    id: workflows.length + 1,\n                    employeeId: id,\n                    type: 'Request Approval',\n                    details: JSON.stringify({\n                        requestId: id,\n                        requestType: 'Request Approval',\n                        requesterId: id,\n                        message: `Request #${id} from Employee ID ${id} was ${body.status.toLowerCase()}.`\n                    }),\n                    status: 'Pending'\n                });\n            } \n            // Create workflow for request edits if items changed\n            else if (body.items || body.requestItems) {\n                workflows.push({\n                    id: workflows.length + 1,\n                    employeeId: id,\n                    type: 'Request Approval',\n                    details: JSON.stringify({\n                        requestId: id,\n                        requestType: 'Request Approval',\n                        requesterId: id,\n                        message: `Review updated Equipment request #${id} from Employee ID ${id}.`\n                    }),\n                    status: 'Pending'\n                });\n            }\n            \n            return ok(workflows[workflowIndex]);\n        }\n\n        // Request route functions\n        function getRequests() {\n            // Get all requests with employee details\n            const allRequests = requests.map(request => {\n                // Find employee\n                const employee = employees.find(e => e.id === request.employeeId);\n                \n                // Find user information if employee exists\n                let userEmail = 'Unknown';\n                let userRole = 'Unknown';\n                let user = null;\n                \n                if (employee && employee.userId) {\n                    user = accounts.find(a => a.id === employee.userId);\n                    if (user) {\n                        userEmail = user.email;\n                        userRole = user.role;\n                    }\n                }\n                \n                // Find department information if employee exists\n                const department = employee?.departmentId ? \n                    departments.find(d => d.id === employee.departmentId) : null;\n                \n                // Return enhanced request with employee and user info\n                // Ensure both items and requestItems properties exist for frontend compatibility\n                const enhancedRequest: any = {\n                    ...request,\n                    Employee: employee ? { \n                        ...employee,\n                        User: user ? {\n                            id: user.id,\n                            email: user.email,\n                            role: user.role\n                        } : null,\n                        Department: department ? {\n                            id: department.id,\n                            name: department.name\n                        } : null\n                    } : null,\n                    userEmail,\n                    userRole\n                };\n                \n                // Ensure both items and requestItems are available\n                if (!enhancedRequest.items && enhancedRequest.requestItems) {\n                    enhancedRequest.items = [...enhancedRequest.requestItems];\n                } else if (!enhancedRequest.requestItems && enhancedRequest.items) {\n                    enhancedRequest.requestItems = [...enhancedRequest.items];\n                } else if (!enhancedRequest.items && !enhancedRequest.requestItems) {\n                    // Initialize empty arrays for both if neither exists\n                    enhancedRequest.items = [];\n                    enhancedRequest.requestItems = [];\n                }\n                \n                return enhancedRequest;\n            });\n            \n            return ok(allRequests);\n        }\n\n        function getRequestById() {\n            const id = parseInt(path.split('/').pop()!);\n            const request = requests.find(r => r.id === id);\n            \n            if (!request) return error('Request not found');\n            \n            // Find employee\n            const employee = employees.find(e => e.id === request.employeeId);\n            \n            // Find user information if employee exists\n            let userEmail = 'Unknown';\n            let userRole = 'Unknown';\n            let user = null;\n            \n            if (employee && employee.userId) {\n                user = accounts.find(a => a.id === employee.userId);\n                if (user) {\n                    userEmail = user.email;\n                    userRole = user.role;\n                }\n            }\n            \n            // Return request with user and employee info\n            const enhancedRequest: any = {\n                ...request,\n                employee: employee ? { \n                    id: employee.id, \n                    employeeId: employee.employeeId \n                } : null,\n                Employee: employee ? { \n                    ...employee,\n                    User: user ? {\n                        id: user.id,\n                        email: user.email,\n                        role: user.role\n                    } : null\n                } : null,\n                userEmail,\n                userRole\n            };\n            \n            // Ensure both items and requestItems are available\n            if (!enhancedRequest.items && enhancedRequest.requestItems) {\n                enhancedRequest.items = [...enhancedRequest.requestItems];\n            } else if (!enhancedRequest.requestItems && enhancedRequest.items) {\n                enhancedRequest.requestItems = [...enhancedRequest.items];\n            } else if (!enhancedRequest.items && !enhancedRequest.requestItems) {\n                // Initialize empty arrays for both if neither exists\n                enhancedRequest.items = [];\n                enhancedRequest.requestItems = [];\n            }\n            \n            return ok(enhancedRequest);\n        }\n\n        function getRequestsByEmployeeId() {\n            const employeeIdParam = new URL(url).searchParams.get('employeeId');\n            if (!employeeIdParam) return error('Employee ID is required');\n            \n            const employeeId = parseInt(employeeIdParam);\n            if (isNaN(employeeId)) return error('Invalid employee ID');\n            \n            // Check if employee exists\n            const employee = employees.find(e => e.id === employeeId);\n            if (!employee) return error('Employee not found');\n            \n            // Get user information\n            const user = accounts.find(a => a.id === employee.userId);\n            let userEmail = 'Unknown';\n            let userRole = 'Unknown';\n            \n            if (user) {\n                userEmail = user.email;\n                userRole = user.role;\n            }\n            \n            // Get department information\n            const department = departments.find(d => d.id === employee.departmentId);\n            \n            // Filter requests by employee ID\n            const filteredRequests = requests.filter(r => r.employeeId === employeeId).map(request => {\n                const enhancedRequest: any = {\n                    ...request,\n                    Employee: { \n                        ...employee,\n                        User: user ? {\n                            id: user.id,\n                            email: user.email,\n                            role: user.role\n                        } : null,\n                        Department: department ? {\n                            id: department.id,\n                            name: department.name\n                        } : null\n                    },\n                    userEmail,\n                    userRole\n                };\n                \n                // Ensure both items and requestItems are available\n                if (!enhancedRequest.items && enhancedRequest.requestItems) {\n                    enhancedRequest.items = [...enhancedRequest.requestItems];\n                } else if (!enhancedRequest.requestItems && enhancedRequest.items) {\n                    enhancedRequest.requestItems = [...enhancedRequest.items];\n                } else if (!enhancedRequest.items && !enhancedRequest.requestItems) {\n                    // Initialize empty arrays for both if neither exists\n                    enhancedRequest.items = [];\n                    enhancedRequest.requestItems = [];\n                }\n                \n                return enhancedRequest;\n            });\n            \n            return ok(filteredRequests);\n        }\n\n        function createRequest() {\n            const account = currentAccount();\n            if (!account) return unauthorized();\n            \n            // Use employeeId from body if provided (for admin users)\n            // Otherwise, find employee associated with current user\n            let employeeId;\n            if (body.employeeId && account.role === Role.Admin) {\n                // Admin users can create requests for any employee\n                employeeId = parseInt(body.employeeId);\n                \n                // Verify that the employee exists\n                const employeeExists = employees.some(e => e.id === employeeId);\n                if (!employeeExists) {\n                    return error('Selected employee not found');\n                }\n            } else {\n                // Regular users can only create requests for themselves\n                const employee = employees.find(e => e.userId === account.id);\n                if (!employee) {\n                    return error('No employee record found for current user');\n                }\n                employeeId = employee.id;\n            }\n            \n            // Find employee record for the request\n            const employee = employees.find(e => e.id === employeeId);\n            \n            // Process items from either items or requestItems property\n            const requestItems = [];\n            if (body.items && Array.isArray(body.items)) {\n                body.items.forEach(item => {\n                    requestItems.push({\n                        name: item.name,\n                        quantity: item.quantity || 1\n                    });\n                });\n            } else if (body.requestItems && Array.isArray(body.requestItems)) {\n                body.requestItems.forEach(item => {\n                    requestItems.push({\n                        name: item.name,\n                        quantity: item.quantity || 1\n                    });\n                });\n            }\n            \n            // Create request with proper structure\n            const request: any = { \n                id: requests.length + 1,\n                employeeId: employeeId,\n                type: body.type || 'Equipment',\n                status: 'Pending',\n                items: [...requestItems],     // For backwards compatibility\n                requestItems: [...requestItems]  // For newer frontend implementations\n            };\n            \n            console.log('Creating new request:', request);\n            requests.push(request);\n            \n            // Create workflow entry for request approval\n            workflows.push({\n                id: workflows.length + 1,\n                employeeId: employeeId,\n                type: 'Request Approval',\n                details: JSON.stringify({\n                    requestId: request.id,\n                    requestType: request.type,\n                    requesterId: employeeId,\n                    message: `Review ${request.type} request #${request.id} from Employee ID ${employee.employeeId}.`\n                }),\n                status: 'Pending'\n            });\n            \n            return ok(request);\n        }\n\n        function updateRequest() {\n            const id = parseInt(path.split('/').pop()!);\n            const reqIndex = requests.findIndex(r => r.id === id);\n            \n            if (reqIndex === -1) return error('Request not found');\n            \n            // Log incoming request update\n            console.log('Updating request:', id, 'with data:', body);\n            \n            // Preserve the employeeId\n            const employeeId = requests[reqIndex].employeeId;\n            const oldStatus = requests[reqIndex].status;\n            \n            // Process items from either items or requestItems property\n            const requestItems = [];\n            if (body.items && Array.isArray(body.items)) {\n                body.items.forEach(item => {\n                    requestItems.push({\n                        name: item.name,\n                        quantity: item.quantity || 1\n                    });\n                });\n            } else if (body.requestItems && Array.isArray(body.requestItems)) {\n                body.requestItems.forEach(item => {\n                    requestItems.push({\n                        name: item.name,\n                        quantity: item.quantity || 1\n                    });\n                });\n            } else {\n                // If no items provided, keep existing ones\n                requestItems.push(...(requests[reqIndex].requestItems || []));\n            }\n            \n            // Update the request - prioritize any provided fields or keep the existing values\n            (requests[reqIndex] as any) = { \n                id,\n                employeeId,\n                type: body.type || requests[reqIndex].type, // Preserve the original type or use the new one\n                status: body.status === 'Completed' ? 'Pending' : (body.status || requests[reqIndex].status), // Prevent Completed status\n                items: [...requestItems],     // For backwards compatibility\n                requestItems: [...requestItems]  // For newer frontend implementations\n            };\n            \n            console.log('Request updated:', requests[reqIndex]);\n            \n            // Find employee info for the workflow\n            const employee = employees.find(e => e.id === employeeId);\n            if (!employee) return error('Employee not found');\n            \n            // Create workflow entry if status changed or items changed\n            if ((body.status && body.status !== oldStatus) || body.items || body.requestItems) {\n                const requestType = body.type || requests[reqIndex].type;\n                const workflowMessage = `Review updated ${requestType} request #${id} from Employee ID ${employee.employeeId}.`;\n                workflows.push({\n                    id: workflows.length + 1,\n                    employeeId: employeeId,\n                    type: 'Request Approval',\n                    details: JSON.stringify({\n                        requestId: id,\n                        requestType: requestType,\n                        requesterId: employeeId,\n                        message: workflowMessage\n                    }),\n                    status: 'Pending'\n                });\n            }\n            \n            return ok(requests[reqIndex]);\n        }\n\n        function getNextEmployeeId() {\n            console.log('Fake backend: Getting next employee ID');\n            \n            // Find the highest employee ID number\n            let maxId = 0;\n            employees.forEach(emp => {\n                if (emp.employeeId && emp.employeeId.startsWith('EMP')) {\n                    const idNum = parseInt(emp.employeeId.substring(3));\n                    if (!isNaN(idNum) && idNum > maxId) {\n                        maxId = idNum;\n                    }\n                }\n            });\n            \n            // Generate the next ID (current max + 1)\n            const nextId = maxId + 1;\n            const nextEmployeeId = 'EMP' + nextId.toString().padStart(3, '0');\n            \n            console.log('Fake backend generated next employee ID:', nextEmployeeId);\n            return ok({ employeeId: nextEmployeeId });\n        }\n\n        // Helper functions\n        function ok(body?) {\n            return of(new HttpResponse({ status: 200, body }));\n        }\n\n        function error(message) {\n            return throwError(() => ({ error: { message } }));\n        }\n\n        function unauthorized() {\n            return throwError(() => ({ status: 401, error: { message: 'Unauthorized' } }));\n        }\n\n        function forbidden() {\n            return throwError(() => ({ status: 403, error: { message: 'Forbidden' } }));\n        }\n\n        function basicDetails(account) {\n            const { id, title, firstName, lastName, email, role, dateCreated, isVerified, status } = account;\n            return { id, title, firstName, lastName, email, role, dateCreated, isVerified, status };\n        }\n\n        function isAuthenticated() {\n            return !!currentAccount();\n        }\n\n        function isAuthorized(role) {\n            const account = currentAccount();\n            if (!account) return false;\n            return account.role === role;\n        }\n\n        function idFromUrl() {\n            const urlParts = path.split('/');\n            return parseInt(urlParts[urlParts.length - 1]);\n        }\n\n        function newAccountId() {\n            return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\n        }\n\n        function currentAccount() {\n            // check if jwt token is in auth header\n            const authHeader = headers.get('Authorization');\n            if (!authHeader || !authHeader.startsWith('Bearer fake-jwt-token')) return;\n\n            // check if token is expired\n            const jwtToken = JSON.parse(atob(authHeader.split('.')[1]));\n            const tokenExpired = Date.now() > (jwtToken.exp * 1000);\n            if (tokenExpired) return;\n\n            const account = accounts.find(x => x.id === jwtToken.id);\n            return account;\n        }\n\n        function generateJwtToken(account) {\n            // create token that expires in 15 minutes\n            const tokenPayload = {\n                exp: Math.round(new Date(Date.now() + 15 * 60 * 1000).getTime() / 1000),\n                id: account.id\n            };\n            return `fake-jwt-token.${btoa(JSON.stringify(tokenPayload))}`;\n        }\n\n        function generateRefreshToken() {\n            const token = new Date().getTime().toString();\n\n            // add token cookie that expires in 7 days\n            const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toUTCString();\n            document.cookie = `fakeRefreshToken=${token}; expires=${expires}; path=/`;\n            return token;\n        }\n\n        function getRefreshToken() {\n            // get refresh token from cookie\n            return (document.cookie.split(';').find(x => x.includes('fakeRefreshToken')) || '=').split('=')[1];\n        }\n\n        function authorize(requiredRole: Role | null, success: () => Observable<HttpEvent<any>>) {\n            if (!isAuthenticated()) return unauthorized();\n            if (requiredRole && !isAuthorized(requiredRole)) return forbidden();\n            return success();\n        }\n    }\n}\n\nexport const fakeBackendProvider = {\n    provide: HTTP_INTERCEPTORS,\n    useClass: FakeBackendInterceptor,\n    multi: true\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}