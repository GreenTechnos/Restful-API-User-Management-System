{"ast":null,"code":"import { NavigationStart } from '@angular/router';\nimport { AlertType } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@app/_services\";\nimport * as i3 from \"@angular/common\";\nfunction AlertComponent_div_0_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"a\", 4);\n    i0.ɵɵlistener(\"click\", function AlertComponent_div_0_div_2_Template_a_click_1_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r3.removeAler(ctx_r3.aler));\n    });\n    i0.ɵɵtext(2, \"\\u00D7\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"span\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const alert_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(ctx_r1.cssClasses(alert_r2));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"innerHTML\", alert_r2.message, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction AlertComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2);\n    i0.ɵɵtemplate(2, AlertComponent_div_0_div_2_Template, 4, 4, \"div\", 3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.alerts);\n  }\n}\nexport let AlertComponent = /*#__PURE__*/(() => {\n  class AlertComponent {\n    constructor(router, alertService) {\n      this.router = router;\n      this.alertService = alertService;\n      this.id = 'default-alert';\n      this.fade = true;\n      this.alerts = [];\n    }\n    ngOnInit() {\n      // subscribe to new alert notifications\n      this.alertSubscription = this.alertService.onAlert(this.id).subscribe(alert => {\n        // clear alerts when an empty alert is received\n        if (!alert.message) {\n          // filter out alerts without 'keepAfterRouteChange' flag\n          this.alerts = this.alerts.filter(x => x.keepAfterRouteChange);\n          // remove 'keepAfterRouteChange' flag on the rest\n          this.alerts.forEach(x => delete x.keepAfterRouteChange);\n          return;\n        }\n        // add alert to array\n        this.alerts.push(alert);\n        // auto close alert if required\n        if (alert.autoClose) {\n          setTimeout(() => this.removeAlert(alert), 3000);\n        }\n      });\n      // clear alerts on location change\n      this.routeSubscription = this.router.events.subscribe(event => {\n        if (event instanceof NavigationStart) {\n          this.alertService.clear(this.id);\n        }\n      });\n    }\n    ngOnDestroy() {\n      // unsubscribe to avoid memory leaks\n      this.alertSubscription.unsubscribe();\n      this.routeSubscription.unsubscribe();\n    }\n    removeAlert(alert) {\n      // check if already removed to prevent error on auto close\n      if (!this.alerts.includes(alert)) return;\n      if (this.fade) {\n        // fade out alert\n        alert.fade = true;\n        // remove alert after faded out\n        setTimeout(() => {\n          this.alerts = this.alerts.filter(x => x !== alert);\n        }, 250);\n      } else {\n        // remove alert\n        this.alerts = this.alerts.filter(x => x !== alert);\n      }\n    }\n    cssClasses(alert) {\n      if (!alert) return;\n      const classes = ['alert', 'alert-dismissable'];\n      const alertTypeClass = {\n        [AlertType.Success]: 'alert alert-success',\n        [AlertType.Error]: 'alert alert-danger',\n        [AlertType.Info]: 'alert alert-info',\n        [AlertType.Warning]: 'alert alert-warning'\n      };\n      classes.push(alertTypeClass[alert.type]);\n      if (alert.fade) {\n        classes.push('fade');\n      }\n      return classes.join(' ');\n    }\n  }\n  AlertComponent.ɵfac = function AlertComponent_Factory(t) {\n    return new (t || AlertComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.AlertService));\n  };\n  AlertComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AlertComponent,\n    selectors: [[\"alert\"]],\n    inputs: {\n      id: \"id\",\n      fade: \"fade\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[\"class\", \"container\", 4, \"ngIf\"], [1, \"container\"], [1, \"m-3\"], [3, \"class\", 4, \"ngFor\", \"ngForOf\"], [1, \"close\", 3, \"click\"], [3, \"innerHTML\"]],\n    template: function AlertComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, AlertComponent_div_0_Template, 3, 1, \"div\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.alerts.length);\n      }\n    },\n    dependencies: [i3.NgForOf, i3.NgIf],\n    encapsulation: 2\n  });\n  return AlertComponent;\n})();","map":{"version":3,"mappings":"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","names":["NavigationStart","AlertType","i0","AlertComponent","constructor","router","alertService","ngOnInit","alertSubscription","onAlert","id","subscribe","alert","message","alerts","filter","x","keepAfterRouteChange","forEach","push","autoClose","setTimeout","removeAlert","routeSubscription","events","event","clear","ngOnDestroy","unsubscribe","includes","fade","cssClasses","classes","alertTypeClass","Success","Error","Info","Warning","type","join","selectors","inputs","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\Restful-API-User-Management-System-backend-postrero\\frontend\\src\\app\\_components\\alert.component.ts","C:\\Users\\User\\Desktop\\Restful-API-User-Management-System-backend-postrero\\frontend\\src\\app\\_components\\alert.component.html"],"sourcesContent":["import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { Router, NavigationStart } from '@angular/router';\nimport { Subscription } from 'rxjs';\n\nimport { Alert, AlertType } from '@app/_models';\nimport { AlertService } from '@app/_services';\n\n@Component({ selector: 'alert', templateUrl: 'alert.component.html' })\nexport class AlertComponent implements OnInit, OnDestroy {\n    @Input() id = 'default-alert';\n    @Input() fade = true;\n    alerts: Alert[] = [];\n    alertSubscription: Subscription;\n    routeSubscription: Subscription;\n\n    constructor(private router: Router, private alertService: AlertService) { }\n\n    ngOnInit() {\n        // subscribe to new alert notifications\n        this.alertSubscription = this.alertService.onAlert(this.id)\n            .subscribe(alert => {\n                // clear alerts when an empty alert is received\n                if (!alert.message) {\n                    // filter out alerts without 'keepAfterRouteChange' flag\n                    this.alerts = this.alerts.filter(x => x.keepAfterRouteChange);\n                    // remove 'keepAfterRouteChange' flag on the rest\n                    this.alerts.forEach(x => delete x.keepAfterRouteChange);\n                    return;\n                }\n\n                // add alert to array\n                this.alerts.push(alert);\n\n                // auto close alert if required\n                if (alert.autoClose) {\n                    setTimeout(() => this.removeAlert(alert), 3000);\n                }\n            });\n\n        // clear alerts on location change\n        this.routeSubscription = this.router.events.subscribe(event => {\n            if (event instanceof NavigationStart) {\n                this.alertService.clear(this.id);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        // unsubscribe to avoid memory leaks\n        this.alertSubscription.unsubscribe();\n        this.routeSubscription.unsubscribe();\n    }\n\n    removeAlert(alert: Alert) {\n        // check if already removed to prevent error on auto close\n        if (!this.alerts.includes(alert)) return;\n\n        if (this.fade) {\n            // fade out alert\n            alert.fade = true;\n\n            // remove alert after faded out\n            setTimeout(() => {\n                this.alerts = this.alerts.filter(x => x !== alert);\n            }, 250);\n        } else {\n            // remove alert\n            this.alerts = this.alerts.filter(x => x !== alert);\n        }\n    }\n\n    cssClasses(alert: Alert) {\n        if (!alert) return;\n\n        const classes = ['alert', 'alert-dismissable'];\n\n        const alertTypeClass = {\n            [AlertType.Success]: 'alert alert-success',\n            [AlertType.Error]: 'alert alert-danger',\n            [AlertType.Info]: 'alert alert-info',\n            [AlertType.Warning]: 'alert alert-warning'\n        }\n\n        classes.push(alertTypeClass[alert.type]);\n\n        if (alert.fade) {\n            classes.push('fade');\n        }\n\n        return classes.join(' ');\n    }\n}","<div *ngIf=\"alerts.length\" class=\"container\">\n    <div class=\"m-3\">\n        <div *ngFor=\"let alert of alerts\" class=\"{{cssClasses(alert)}}\">\n            <a class=\"close\" (click)=\"removeAler(aler)\">&times;</a>\n            <span [innerHTML]=\"alert.message\"></span>\n        </div>\n    </div>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}