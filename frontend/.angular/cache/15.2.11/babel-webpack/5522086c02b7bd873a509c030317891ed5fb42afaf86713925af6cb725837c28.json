{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(accountService) {\n      this.accountService = accountService;\n    }\n    intercept(request, next) {\n      return next.handle(request).pipe(catchError(err => {\n        if ([401, 403].includes(err.status) && this.accountService.accountValue) {\n          // auto logout if 401 or 403 response returned from api\n          this.accountService.logout();\n        }\n        const error = err && err.error && err.error.message || err.statusText;\n        // Only log errors that aren't refresh token errors\n        if (!request.url.includes('/refresh-token')) {\n          console.error(err);\n        }\n        return throwError(error);\n      }));\n    }\n  }\n  ErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.AccountService));\n  };\n  ErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac\n  });\n  return ErrorInterceptor;\n})();","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;AAK3C,WAAaC,gBAAgB;EAAvB,MAAOA,gBAAgB;IACzBC,YAAoBC,cAA8B;MAA9B,mBAAc,GAAdA,cAAc;IAAoB;IAEtDC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;MAClD,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC,CAACG,IAAI,CAC5BR,UAAU,CAACS,GAAG,IAAG;QACb,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAACC,QAAQ,CAACD,GAAG,CAACE,MAAM,CAAC,IAAI,IAAI,CAACR,cAAc,CAACS,YAAY,EAAE;UACrE;UACA,IAAI,CAACT,cAAc,CAACU,MAAM,EAAE;;QAGhC,MAAMC,KAAK,GAAIL,GAAG,IAAIA,GAAG,CAACK,KAAK,IAAIL,GAAG,CAACK,KAAK,CAACC,OAAO,IAAKN,GAAG,CAACO,UAAU;QAEvE;QACA,IAAI,CAACX,OAAO,CAACY,GAAG,CAACP,QAAQ,CAAC,gBAAgB,CAAC,EAAE;UACzCQ,OAAO,CAACJ,KAAK,CAACL,GAAG,CAAC;;QAGtB,OAAOV,UAAU,CAACe,KAAK,CAAC;MAC5B,CAAC,CAAC,CACL;IACL;;;qBArBSb,gBAAgB;EAAA;;WAAhBA,gBAAgB;IAAAkB,SAAhBlB,gBAAgB;EAAA;EAAA,OAAhBA,gBAAgB;AAAA","names":["throwError","catchError","ErrorInterceptor","constructor","accountService","intercept","request","next","handle","pipe","err","includes","status","accountValue","logout","error","message","statusText","url","console","factory"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\Restful-API-User-Management-System-backend-postrero\\frontend\\src\\app\\_helpers\\error.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { AccountService } from '@app/_services';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n    constructor(private accountService: AccountService) { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        return next.handle(request).pipe(\n            catchError(err => {\n                if ([401, 403].includes(err.status) && this.accountService.accountValue) {\n                    // auto logout if 401 or 403 response returned from api\n                    this.accountService.logout();\n                }\n\n                const error = (err && err.error && err.error.message) || err.statusText;\n                \n                // Only log errors that aren't refresh token errors\n                if (!request.url.includes('/refresh-token')) {\n                    console.error(err);\n                }\n                \n                return throwError(error);\n            })\n        );\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}